// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.load_casecomment_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: LOAD_CaseComment Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class LOAD_CaseComment implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(Separateur != null){
				
					this.setProperty("Separateur", Separateur.toString());
				
			}
			
			if(FilePath != null){
				
					this.setProperty("FilePath", FilePath.toString());
				
			}
			
			if(CIBLE_UserId != null){
				
					this.setProperty("CIBLE_UserId", CIBLE_UserId.toString());
				
			}
			
			if(CIBLE_SecuK != null){
				
					this.setProperty("CIBLE_SecuK", CIBLE_SecuK.toString());
				
			}
			
			if(CIBLE_PassW != null){
				
					this.setProperty("CIBLE_PassW", CIBLE_PassW.toString());
				
			}
			
			if(CIBLE_Endpt != null){
				
					this.setProperty("CIBLE_Endpt", CIBLE_Endpt.toString());
				
			}
			
			if(SOURCE_UserId != null){
				
					this.setProperty("SOURCE_UserId", SOURCE_UserId.toString());
				
			}
			
			if(SOURCE_SecuK != null){
				
					this.setProperty("SOURCE_SecuK", SOURCE_SecuK.toString());
				
			}
			
			if(SOURCE_Endpt != null){
				
					this.setProperty("SOURCE_Endpt", SOURCE_Endpt.toString());
				
			}
			
			if(SOURCE_PassW != null){
				
					this.setProperty("SOURCE_PassW", SOURCE_PassW.toString());
				
			}
			
			if(Path_DI != null){
				
					this.setProperty("Path_DI", Path_DI.toString());
				
			}
			
			if(ProjetFolder != null){
				
					this.setProperty("ProjetFolder", ProjetFolder.toString());
				
			}
			
			if(OutFileFolder != null){
				
					this.setProperty("OutFileFolder", OutFileFolder.toString());
				
			}
			
			if(Success != null){
				
					this.setProperty("Success", Success.toString());
				
			}
			
			if(Error != null){
				
					this.setProperty("Error", Error.toString());
				
			}
			
			if(Output != null){
				
					this.setProperty("Output", Output.toString());
				
			}
			
		}

public String Separateur;
public String getSeparateur(){
	return this.Separateur;
}
public String FilePath;
public String getFilePath(){
	return this.FilePath;
}
public String CIBLE_UserId;
public String getCIBLE_UserId(){
	return this.CIBLE_UserId;
}
public java.lang.String CIBLE_SecuK;
public java.lang.String getCIBLE_SecuK(){
	return this.CIBLE_SecuK;
}
public java.lang.String CIBLE_PassW;
public java.lang.String getCIBLE_PassW(){
	return this.CIBLE_PassW;
}
public String CIBLE_Endpt;
public String getCIBLE_Endpt(){
	return this.CIBLE_Endpt;
}
public String SOURCE_UserId;
public String getSOURCE_UserId(){
	return this.SOURCE_UserId;
}
public java.lang.String SOURCE_SecuK;
public java.lang.String getSOURCE_SecuK(){
	return this.SOURCE_SecuK;
}
public String SOURCE_Endpt;
public String getSOURCE_Endpt(){
	return this.SOURCE_Endpt;
}
public java.lang.String SOURCE_PassW;
public java.lang.String getSOURCE_PassW(){
	return this.SOURCE_PassW;
}
public String Path_DI;
public String getPath_DI(){
	return this.Path_DI;
}
public String ProjetFolder;
public String getProjetFolder(){
	return this.ProjetFolder;
}
public String OutFileFolder;
public String getOutFileFolder(){
	return this.OutFileFolder;
}
public String Success;
public String getSuccess(){
	return this.Success;
}
public String Error;
public String getError(){
	return this.Error;
}
public String Output;
public String getOutput(){
	return this.Output;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "LOAD_CaseComment";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				LOAD_CaseComment.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(LOAD_CaseComment.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void Implicit_Context_Regex_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							Implicit_Context_Context_error(exception, errorComponent, globalMap);
						
						}
					
			public void Implicit_Context_Context_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					Implicit_Context_Regex_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tSalesforceConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tDie_2Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tSalesforceConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_CreatedBy_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ModifiedBy_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Case_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceOutputBulkExec_1_tSalesforceOutputBulk_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSalesforceOutputBulkExec_1_tSalesforceBulkExec_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSalesforceOutputBulkExec_1_tSalesforceBulkExec_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void Implicit_Context_Regex_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row_Implicit_Context_RegexStruct implements routines.system.IPersistableRow<row_Implicit_Context_RegexStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_Implicit_Context_RegexStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void Implicit_Context_RegexProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_Implicit_Context_RegexStruct row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();




	
	/**
	 * [Implicit_Context_Context begin ] start
	 */

	

	
		
		ok_Hash.put("Implicit_Context_Context", false);
		start_Hash.put("Implicit_Context_Context", System.currentTimeMillis());
		
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_Implicit_Context_Context = 0;
		
	java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
	int nb_line_Implicit_Context_Context = 0;

 



/**
 * [Implicit_Context_Context begin ] stop
 */



	
	/**
	 * [Implicit_Context_Regex begin ] start
	 */

	

	
		
		ok_Hash.put("Implicit_Context_Regex", false);
		start_Hash.put("Implicit_Context_Regex", System.currentTimeMillis());
		
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	
		int tos_count_Implicit_Context_Regex = 0;
		

	
	
		int nb_line_Implicit_Context_Regex = 0;
        
        int footer_Implicit_Context_Regex  = 0;
        boolean removeEmptyRowImplicit_Context_Regex = true;
        Object source_Implicit_Context_Regex = /** Start field Implicit_Context_Regex:FILENAME */"C:/Users/Cillia/Desktop/TalendWork/Commun/config.properties"/** End field Implicit_Context_Regex:FILENAME */;
        
        org.talend.fileprocess.TOSDelimitedReader inImplicit_Context_Regex=null;
        if(source_Implicit_Context_Regex instanceof String || source_Implicit_Context_Regex instanceof java.io.InputStream){
        	inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/** Start field Implicit_Context_Regex:FILENAME */"C:/Users/Cillia/Desktop/TalendWork/Commun/config.properties"/** End field Implicit_Context_Regex:FILENAME */, "ISO-8859-15", "", "\n", removeEmptyRowImplicit_Context_Regex);
        }else{
        	throw new java.lang.Exception("The source data should be specified as File Path or InputStream or java.io.Reader!");
        }
        String strImplicit_Context_Regex;
        int totalLineImplicit_Context_Regex=0,currentLineImplicit_Context_Regex=0,beginLineImplicit_Context_Regex=0,lastLineImplicit_Context_Regex=-1,validRowCountImplicit_Context_Regex=0;
        int limitImplicit_Context_Regex=-1;
        
		int headerImplicit_Context_Regex = 0;
		if(headerImplicit_Context_Regex > 0){
			beginLineImplicit_Context_Regex=headerImplicit_Context_Regex+1;
		}
    	
        if(footer_Implicit_Context_Regex > 0){
			while (inImplicit_Context_Regex.readRecord()) {
                strImplicit_Context_Regex =inImplicit_Context_Regex.getRowRecord();        
				totalLineImplicit_Context_Regex++;
			}
			int lastLineTempImplicit_Context_Regex = totalLineImplicit_Context_Regex - footer_Implicit_Context_Regex   < 0? 0 : totalLineImplicit_Context_Regex - footer_Implicit_Context_Regex ;
			if(lastLineImplicit_Context_Regex > 0){
				lastLineImplicit_Context_Regex = lastLineImplicit_Context_Regex < lastLineTempImplicit_Context_Regex ? lastLineImplicit_Context_Regex : lastLineTempImplicit_Context_Regex; 
			}else {
				lastLineImplicit_Context_Regex = lastLineTempImplicit_Context_Regex;
			}
		  	inImplicit_Context_Regex.close();
        	inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/** Start field Implicit_Context_Regex:FILENAME */"C:/Users/Cillia/Desktop/TalendWork/Commun/config.properties"/** End field Implicit_Context_Regex:FILENAME */, "ISO-8859-15", "", "\n", removeEmptyRowImplicit_Context_Regex);
		}
        java.util.StringTokenizer strTokenImplicit_Context_Regex;
        java.util.regex.Pattern patternImplicit_Context_Regex = java.util.regex.Pattern.compile("^([^"+"=="+"]*)"+"=="+"(.*)$");
        java.util.regex.Matcher matcherImplicit_Context_Regex = null;
        
        
        while (inImplicit_Context_Regex.readRecord()) {
            strImplicit_Context_Regex =inImplicit_Context_Regex.getRowRecord(); 
        	
       		currentLineImplicit_Context_Regex++;
        	if(currentLineImplicit_Context_Regex < beginLineImplicit_Context_Regex) {
        		continue;
        	}
        	if(lastLineImplicit_Context_Regex > -1 && currentLineImplicit_Context_Regex > lastLineImplicit_Context_Regex) {
        		break;
        	}
        	if(removeEmptyRowImplicit_Context_Regex && ("").equals(strImplicit_Context_Regex)){
        		continue;
        	}
        	if(limitImplicit_Context_Regex!=-1&& validRowCountImplicit_Context_Regex >= limitImplicit_Context_Regex){
        		break;
        	}
        	
        	matcherImplicit_Context_Regex = patternImplicit_Context_Regex.matcher(strImplicit_Context_Regex);
        	int groupCountImplicit_Context_Regex = 0;
        	boolean isMatchImplicit_Context_Regex = matcherImplicit_Context_Regex.find(); 
        	if(isMatchImplicit_Context_Regex){
        	groupCountImplicit_Context_Regex=matcherImplicit_Context_Regex.groupCount();
			}
    		row_Implicit_Context_Regex = null;						
			
			boolean lineIsEmptyImplicit_Context_Regex = strImplicit_Context_Regex.length() == 0;
			
			String[] valueImplicit_Context_Regex = new String[2];
			String frontCharImplicit_Context_Regex,behindCharImplicit_Context_Regex;
			for(int i=0;i<2;i++){
				valueImplicit_Context_Regex[i] = "";
				if(lineIsEmptyImplicit_Context_Regex){
					continue;
				}
				if(i < groupCountImplicit_Context_Regex){
					valueImplicit_Context_Regex[i] = matcherImplicit_Context_Regex.group(i+1);
				}
			}
			validRowCountImplicit_Context_Regex++;
			
			boolean whetherReject_Implicit_Context_Regex = false;
			row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();
			try {			
			if(!isMatchImplicit_Context_Regex){//line data not matched with given regex parameter
        		throw new java.lang.Exception("Line doesn't match: " + strImplicit_Context_Regex);
        	}
								
						if(valueImplicit_Context_Regex[0]!=null && valueImplicit_Context_Regex[0].length() > 0) {
							row_Implicit_Context_Regex.key = valueImplicit_Context_Regex[0];					
						} else {
						row_Implicit_Context_Regex.key = "";}
						
						if(valueImplicit_Context_Regex[1]!=null && valueImplicit_Context_Regex[1].length() > 0) {
							row_Implicit_Context_Regex.value = valueImplicit_Context_Regex[1];					
						} else {
						row_Implicit_Context_Regex.value = "";}
	
										
					
    } catch (java.lang.Exception e) {
        whetherReject_Implicit_Context_Regex = true;
                    	if(isMatchImplicit_Context_Regex){
                    		System.err.println(e.getMessage());
                    	}
                row_Implicit_Context_Regex = null;
    }					
					
					
			
			nb_line_Implicit_Context_Regex++;

 



/**
 * [Implicit_Context_Regex begin ] stop
 */
	
	/**
	 * [Implicit_Context_Regex main ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 


	tos_count_Implicit_Context_Regex++;

/**
 * [Implicit_Context_Regex main ] stop
 */
	
	/**
	 * [Implicit_Context_Regex process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex process_data_begin ] stop
 */
// Start of branch "row_Implicit_Context_Regex"
if(row_Implicit_Context_Regex != null) { 



	
	/**
	 * [Implicit_Context_Context main ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

			//Main
			//row_Implicit_Context_Regex


			
				if(execStat){
					runStat.updateStatOnConnection("Main"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_Implicit_Context_Context = null;
                    String key_Implicit_Context_Context = null;
                      if (row_Implicit_Context_Regex.key != null){
                          tmp_key_Implicit_Context_Context = row_Implicit_Context_Regex.key.trim();
                        if ((tmp_key_Implicit_Context_Context.startsWith("#") || tmp_key_Implicit_Context_Context.startsWith("!") )){
                          tmp_key_Implicit_Context_Context = null;
                        } else {
                          row_Implicit_Context_Regex.key = tmp_key_Implicit_Context_Context;
                        }
                      }
                        if(row_Implicit_Context_Regex.key != null) {
                    key_Implicit_Context_Context =
                        row_Implicit_Context_Regex.key;
                        }
                    String value_Implicit_Context_Context = null;
                        if(row_Implicit_Context_Regex.value != null) {
                    value_Implicit_Context_Context =
                        row_Implicit_Context_Regex.value;
                        }
				
				String currentValue_Implicit_Context_Context = value_Implicit_Context_Context;
										
						if ((key_Implicit_Context_Context != null) && ("CIBLE_SecuK".equals(key_Implicit_Context_Context)) ) currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context.replaceAll(".", "*");						
						if ((key_Implicit_Context_Context != null) && ("CIBLE_PassW".equals(key_Implicit_Context_Context)) ) currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context.replaceAll(".", "*");						
						if ((key_Implicit_Context_Context != null) && ("SOURCE_SecuK".equals(key_Implicit_Context_Context)) ) currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context.replaceAll(".", "*");						
						if ((key_Implicit_Context_Context != null) && ("SOURCE_PassW".equals(key_Implicit_Context_Context)) ) currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context.replaceAll(".", "*");

  if (tmp_key_Implicit_Context_Context != null){
  try{
        if(key_Implicit_Context_Context!=null && "Separateur".equals(key_Implicit_Context_Context))
        {
           context.Separateur=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "FilePath".equals(key_Implicit_Context_Context))
        {
           context.FilePath=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "CIBLE_UserId".equals(key_Implicit_Context_Context))
        {
           context.CIBLE_UserId=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "CIBLE_SecuK".equals(key_Implicit_Context_Context))
        {
           context.CIBLE_SecuK=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "CIBLE_PassW".equals(key_Implicit_Context_Context))
        {
           context.CIBLE_PassW=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "CIBLE_Endpt".equals(key_Implicit_Context_Context))
        {
           context.CIBLE_Endpt=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SOURCE_UserId".equals(key_Implicit_Context_Context))
        {
           context.SOURCE_UserId=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SOURCE_SecuK".equals(key_Implicit_Context_Context))
        {
           context.SOURCE_SecuK=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SOURCE_Endpt".equals(key_Implicit_Context_Context))
        {
           context.SOURCE_Endpt=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SOURCE_PassW".equals(key_Implicit_Context_Context))
        {
           context.SOURCE_PassW=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Path_DI".equals(key_Implicit_Context_Context))
        {
           context.Path_DI=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ProjetFolder".equals(key_Implicit_Context_Context))
        {
           context.ProjetFolder=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "OutFileFolder".equals(key_Implicit_Context_Context))
        {
           context.OutFileFolder=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Success".equals(key_Implicit_Context_Context))
        {
           context.Success=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Error".equals(key_Implicit_Context_Context))
        {
           context.Error=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Output".equals(key_Implicit_Context_Context))
        {
           context.Output=value_Implicit_Context_Context;
        }


        if (context.getProperty(key_Implicit_Context_Context)!=null)
        {
            assignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }else  {
            newPropertyList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }
        if(value_Implicit_Context_Context == null){
            context.setProperty(key_Implicit_Context_Context, "");
        }else{
            context.setProperty(key_Implicit_Context_Context,value_Implicit_Context_Context);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_Implicit_Context_Context + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_Implicit_Context_Context++;
    }
        //////////////////////////

 


	tos_count_Implicit_Context_Context++;

/**
 * [Implicit_Context_Context main ] stop
 */
	
	/**
	 * [Implicit_Context_Context process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context process_data_begin ] stop
 */
	
	/**
	 * [Implicit_Context_Context process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context process_data_end ] stop
 */

} // End of branch "row_Implicit_Context_Regex"




	
	/**
	 * [Implicit_Context_Regex process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex process_data_end ] stop
 */
	
	/**
	 * [Implicit_Context_Regex end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

	
	
    		}
			if(!(source_Implicit_Context_Regex instanceof java.io.InputStream)){
            	inImplicit_Context_Regex.close();
            }
            inImplicit_Context_Regex = null;
            globalMap.put("Implicit_Context_Regex_NB_LINE",nb_line_Implicit_Context_Regex);      
 

ok_Hash.put("Implicit_Context_Regex", true);
end_Hash.put("Implicit_Context_Regex", System.currentTimeMillis());




/**
 * [Implicit_Context_Regex end ] stop
 */

	
	/**
	 * [Implicit_Context_Context end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
	
	java.util.Enumeration<?> enu_Implicit_Context_Context = context.propertyNames();
    while(enu_Implicit_Context_Context.hasMoreElements())
    {           
    	String key_Implicit_Context_Context = (String)enu_Implicit_Context_Context.nextElement();
        if(!assignList_Implicit_Context_Context.contains(key_Implicit_Context_Context) && !newPropertyList_Implicit_Context_Context.contains(key_Implicit_Context_Context))
        {
            noAssignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }          
    } 

    String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context.toString();
    String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context.substring(1, newPropertyStr_Implicit_Context_Context.length() - 1);
    
    String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context.toString();
    String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context.substring(1, noAssignStr_Implicit_Context_Context.length() - 1);
    
    globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT", newProperty_Implicit_Context_Context);
    globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED", noAssign_Implicit_Context_Context);

    globalMap.put("Implicit_Context_Context_NB_LINE",nb_line_Implicit_Context_Context);

	List<String> parametersToEncrypt_Implicit_Context_Context = new java.util.ArrayList<String>();
	
		parametersToEncrypt_Implicit_Context_Context.add("CIBLE_SecuK");
		
		parametersToEncrypt_Implicit_Context_Context.add("CIBLE_PassW");
		
		parametersToEncrypt_Implicit_Context_Context.add("SOURCE_SecuK");
		
		parametersToEncrypt_Implicit_Context_Context.add("SOURCE_PassW");
		
	
	resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_Implicit_Context_Context));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Main"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("Implicit_Context_Context", true);
end_Hash.put("Implicit_Context_Context", System.currentTimeMillis());




/**
 * [Implicit_Context_Context end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [Implicit_Context_Regex finally ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex finally ] stop
 */

	
	/**
	 * [Implicit_Context_Context finally ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tSalesforceConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tSalesforceConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSalesforceConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceConnection_1", false);
		start_Hash.put("tSalesforceConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceConnection_1";

	
		int tos_count_tSalesforceConnection_1 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceConnection_1 =
        new org.talend.components.salesforce.tsalesforceconnection.TSalesforceConnectionDefinition();

org.talend.components.salesforce.SalesforceConnectionProperties props_tSalesforceConnection_1 =
        (org.talend.components.salesforce.SalesforceConnectionProperties) def_tSalesforceConnection_1.createRuntimeProperties();
 		                    props_tSalesforceConnection_1.setValue("endpoint",
 		                    context.SOURCE_Endpt);
 		                    
 		                    props_tSalesforceConnection_1.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceConnection_1.setValue("bulkConnection",
 		                    true);
 		                    
 		                    props_tSalesforceConnection_1.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceConnection_1.setValue("httpTraceMessage",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.setValue("clientId",
 		                    "");
 		                    
 		                    props_tSalesforceConnection_1.userPassword.setValue("securityKey",
 		                    context.SOURCE_SecuK);
 		                    
 		                    props_tSalesforceConnection_1.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.userPassword.setValue("userId",
 		                    context.SOURCE_UserId);
 		                    
 		                    props_tSalesforceConnection_1.userPassword.setValue("password",
 		                    context.SOURCE_PassW);
 		                    
 		                    props_tSalesforceConnection_1.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceConnection_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceConnection_1 = props_tSalesforceConnection_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceConnection_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceConnection_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceConnection_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceConnection_1.referencedComponent.setReference(referencedComponentProperties_tSalesforceConnection_1);
        }
    }
globalMap.put("tSalesforceConnection_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceConnection_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.1");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.25.3");
java.net.URL mappings_url_tSalesforceConnection_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceConnection_1_MAPPINGS_URL", mappings_url_tSalesforceConnection_1);

org.talend.components.api.container.RuntimeContainer container_tSalesforceConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceConnection_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceConnection_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceConnection_1 = null;
topology_tSalesforceConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceConnection_1 = def_tSalesforceConnection_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceConnection_1, topology_tSalesforceConnection_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceConnection_1 = def_tSalesforceConnection_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceConnection_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceConnection_1 = componentRuntime_tSalesforceConnection_1.initialize(container_tSalesforceConnection_1, props_tSalesforceConnection_1);

if (initVr_tSalesforceConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceConnection_1.getMessage());
}

if(componentRuntime_tSalesforceConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceConnection_1;
	compDriverInitialization_tSalesforceConnection_1.runAtDriver(container_tSalesforceConnection_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceConnection_1 = null;
if(componentRuntime_tSalesforceConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceConnection_1;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceConnection_1 = sourceOrSink_tSalesforceConnection_1.validate(container_tSalesforceConnection_1);
	if (vr_tSalesforceConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceConnection_1.getMessage());
	}
}

 



/**
 * [tSalesforceConnection_1 begin ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 main ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	


 


	tos_count_tSalesforceConnection_1++;

/**
 * [tSalesforceConnection_1 main ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	


 



/**
 * [tSalesforceConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	


 



/**
 * [tSalesforceConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 end ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	
// end of generic

 

ok_Hash.put("tSalesforceConnection_1", true);
end_Hash.put("tSalesforceConnection_1", System.currentTimeMillis());




/**
 * [tSalesforceConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSalesforceConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tSalesforceConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	
// finally of generic

 



/**
 * [tSalesforceConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tSalesforceConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSalesforceConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceConnection_2", false);
		start_Hash.put("tSalesforceConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceConnection_2";

	
		int tos_count_tSalesforceConnection_2 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceConnection_2 =
        new org.talend.components.salesforce.tsalesforceconnection.TSalesforceConnectionDefinition();

org.talend.components.salesforce.SalesforceConnectionProperties props_tSalesforceConnection_2 =
        (org.talend.components.salesforce.SalesforceConnectionProperties) def_tSalesforceConnection_2.createRuntimeProperties();
 		                    props_tSalesforceConnection_2.setValue("endpoint",
 		                    context.CIBLE_Endpt);
 		                    
 		                    props_tSalesforceConnection_2.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceConnection_2.setValue("bulkConnection",
 		                    true);
 		                    
 		                    props_tSalesforceConnection_2.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_2.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceConnection_2.setValue("httpTraceMessage",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_2.setValue("clientId",
 		                    "");
 		                    
 		                    props_tSalesforceConnection_2.userPassword.setValue("securityKey",
 		                    context.CIBLE_SecuK);
 		                    
 		                    props_tSalesforceConnection_2.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_2.userPassword.setValue("userId",
 		                    context.CIBLE_UserId);
 		                    
 		                    props_tSalesforceConnection_2.userPassword.setValue("password",
 		                    context.CIBLE_PassW);
 		                    
 		                    props_tSalesforceConnection_2.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_2.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_2.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceConnection_2.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceConnection_2 = props_tSalesforceConnection_2.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceConnection_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceConnection_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceConnection_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceConnection_2.referencedComponent.setReference(referencedComponentProperties_tSalesforceConnection_2);
        }
    }
globalMap.put("tSalesforceConnection_2_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceConnection_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.1");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.25.3");
java.net.URL mappings_url_tSalesforceConnection_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceConnection_2_MAPPINGS_URL", mappings_url_tSalesforceConnection_2);

org.talend.components.api.container.RuntimeContainer container_tSalesforceConnection_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceConnection_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceConnection_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceConnection_2 = null;
topology_tSalesforceConnection_2 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceConnection_2 = def_tSalesforceConnection_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceConnection_2, topology_tSalesforceConnection_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceConnection_2 = def_tSalesforceConnection_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceConnection_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceConnection_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceConnection_2 = componentRuntime_tSalesforceConnection_2.initialize(container_tSalesforceConnection_2, props_tSalesforceConnection_2);

if (initVr_tSalesforceConnection_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceConnection_2.getMessage());
}

if(componentRuntime_tSalesforceConnection_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceConnection_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceConnection_2;
	compDriverInitialization_tSalesforceConnection_2.runAtDriver(container_tSalesforceConnection_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceConnection_2 = null;
if(componentRuntime_tSalesforceConnection_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceConnection_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceConnection_2;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceConnection_2 = sourceOrSink_tSalesforceConnection_2.validate(container_tSalesforceConnection_2);
	if (vr_tSalesforceConnection_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceConnection_2.getMessage());
	}
}

 



/**
 * [tSalesforceConnection_2 begin ] stop
 */
	
	/**
	 * [tSalesforceConnection_2 main ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_2";

	


 


	tos_count_tSalesforceConnection_2++;

/**
 * [tSalesforceConnection_2 main ] stop
 */
	
	/**
	 * [tSalesforceConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_2";

	


 



/**
 * [tSalesforceConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tSalesforceConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_2";

	


 



/**
 * [tSalesforceConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceConnection_2 end ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_2";

	
// end of generic

 

ok_Hash.put("tSalesforceConnection_2", true);
end_Hash.put("tSalesforceConnection_2", System.currentTimeMillis());




/**
 * [tSalesforceConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_2";

	
// finally of generic

 



/**
 * [tSalesforceConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";

	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_2", 5, "Erreur de connection à la cible", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("Erreur de connection à la cible");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "Erreur de connection à la cible");
	globalMap.put("tDie_2_DIE_MESSAGES", "Erreur de connection à la cible");
	
	} catch (Exception | Error e_tDie_2) {
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_2_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Error de Connection à la Source", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Error de Connection à la Source");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Error de Connection à la Source");
	globalMap.put("tDie_1_DIE_MESSAGES", "Error de Connection à la Source");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String ExternalIdSplit__c;

				public String getExternalIdSplit__c () {
					return this.ExternalIdSplit__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.ExternalIdSplit__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.ExternalIdSplit__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",ExternalIdSplit__c="+ExternalIdSplit__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_LOAD_CaseComment_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;
 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_2", false);
		start_Hash.put("tSalesforceInput_2", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_2";

	
		int tos_count_tSalesforceInput_2 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_2 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_2 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_2.createRuntimeProperties();
 		                    props_tSalesforceInput_2.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_2.setValue("manualQuery",
 		                    true);
 		                    
 		                    props_tSalesforceInput_2.setValue("query",
 		                    "SELECT Id, ExternalIdSplit__c FROM User");
 		                    
 		                    props_tSalesforceInput_2.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_2.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_2.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_2.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_2.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_2.module.setValue("moduleName",
 		                    "User");
 		                    
 		                    props_tSalesforceInput_2.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_2.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_2.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_2_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"User\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ExternalIdSplit__c\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ExternalIdSplit__c\",\"talend.field.dbColumnName\":\"ExternalIdSplit__c\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ExternalIdSplit__c\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"User\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_2_1_fisrt sst_tSalesforceInput_2_1_fisrt = new SchemaSettingTool_tSalesforceInput_2_1_fisrt();
 		                    
 		                    props_tSalesforceInput_2.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_2_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_2.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_2 = props_tSalesforceInput_2.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_2.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_2);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_2.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_2 = props_tSalesforceInput_2.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_2.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_2);
        }
    }
globalMap.put("tSalesforceInput_2_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.1");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.25.3");
java.net.URL mappings_url_tSalesforceInput_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_2_MAPPINGS_URL", mappings_url_tSalesforceInput_2);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_2 = null;
topology_tSalesforceInput_2 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_2 = def_tSalesforceInput_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_2, topology_tSalesforceInput_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_2 = def_tSalesforceInput_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_2 = componentRuntime_tSalesforceInput_2.initialize(container_tSalesforceInput_2, props_tSalesforceInput_2);

if (initVr_tSalesforceInput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_2.getMessage());
}

if(componentRuntime_tSalesforceInput_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_2;
	compDriverInitialization_tSalesforceInput_2.runAtDriver(container_tSalesforceInput_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_2 = null;
if(componentRuntime_tSalesforceInput_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_2;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_2 = sourceOrSink_tSalesforceInput_2.validate(container_tSalesforceInput_2);
	if (vr_tSalesforceInput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_2.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_2 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_2;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_2 =
            source_tSalesforceInput_2.createReader(container_tSalesforceInput_2);
	reader_tSalesforceInput_2 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_2, container_tSalesforceInput_2);

        boolean multi_output_is_allowed_tSalesforceInput_2 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_2 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_2.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_2 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_2 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_2 = props_tSalesforceInput_2.getSchema(c_tSalesforceInput_2, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_2 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_2, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_2 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_2 = reader_tSalesforceInput_2.start();

    resourceMap.put("reader_tSalesforceInput_2", reader_tSalesforceInput_2);

    for (; available_tSalesforceInput_2; available_tSalesforceInput_2 = reader_tSalesforceInput_2.advance()) {
    	nb_line_tSalesforceInput_2++;

    	
        if (multi_output_is_allowed_tSalesforceInput_2) {
                row1 = null;

        }

        try {
            Object data_tSalesforceInput_2 = reader_tSalesforceInput_2.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_2) {
                    row1 = new row1Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_2 == null) {
            factory_tSalesforceInput_2 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_2.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_2.setWrapped(factory_tSalesforceInput_2.convertToAvro(data_tSalesforceInput_2));
                Object columnValue_0_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(0);
                        row1.Id = (String) (columnValue_0_tSalesforceInput_2);
                Object columnValue_1_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(1);
                        row1.ExternalIdSplit__c = (String) (columnValue_1_tSalesforceInput_2);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_2) {
        	java.util.Map<String,Object> info_tSalesforceInput_2 = e_tSalesforceInput_2.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_2 = null;
            	if(info_tSalesforceInput_2.containsKey("error")){
            		errorMessage_tSalesforceInput_2 = info_tSalesforceInput_2.get("error");
        		}else if(info_tSalesforceInput_2.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_2 = info_tSalesforceInput_2.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_2 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_2 = "Row "+ nb_line_tSalesforceInput_2 + ": "+errorMessage_tSalesforceInput_2;
    			System.err.println(errorMessage_tSalesforceInput_2);
            	// If the record is reject, the main line record should put NULL
            	row1 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_2 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_2 = null;


 



/**
 * [tSalesforceInput_2 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_2 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	


 


	tos_count_tSalesforceInput_2++;

/**
 * [tSalesforceInput_2 main ] stop
 */
	
	/**
	 * [tSalesforceInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	


 



/**
 * [tSalesforceInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		



    
		row1Struct oneRow_tHashOutput_1 = new row1Struct();
				
					oneRow_tHashOutput_1.Id = row1.Id;
					oneRow_tHashOutput_1.ExternalIdSplit__c = row1.ExternalIdSplit__c;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;
 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	


 



/**
 * [tSalesforceInput_2 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_2 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_2", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_2.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_2 = reader_tSalesforceInput_2.getReturnValues();
if(resultMap_tSalesforceInput_2!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_2 : resultMap_tSalesforceInput_2.entrySet()) {
		switch(entry_tSalesforceInput_2.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "ERROR_MESSAGE", entry_tSalesforceInput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "NB_LINE", entry_tSalesforceInput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "NB_SUCCESS", entry_tSalesforceInput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "NB_REJECT", entry_tSalesforceInput_2.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_2 = new StringBuilder();
            for (int i_tSalesforceInput_2 = 0; i_tSalesforceInput_2 < entry_tSalesforceInput_2.getKey().length(); i_tSalesforceInput_2++) {
                char ch_tSalesforceInput_2 = entry_tSalesforceInput_2.getKey().charAt(i_tSalesforceInput_2);
                if(Character.isUpperCase(ch_tSalesforceInput_2) && i_tSalesforceInput_2> 0) {
                	studio_key_tSalesforceInput_2.append('_');
                }
                studio_key_tSalesforceInput_2.append(ch_tSalesforceInput_2);
            }
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", studio_key_tSalesforceInput_2.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_2.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_2", true);
end_Hash.put("tSalesforceInput_2", System.currentTimeMillis());




/**
 * [tSalesforceInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSalesforceInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tSalesforceInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_2 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_2")==null){
    if(resourceMap.get("reader_tSalesforceInput_2")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_2")).close();
		} catch (java.io.IOException e_tSalesforceInput_2) {
			String errorMessage_tSalesforceInput_2 = "failed to release the resource in tSalesforceInput_2 :" + e_tSalesforceInput_2.getMessage();
			System.err.println(errorMessage_tSalesforceInput_2);
		}
	}
}
 



/**
 * [tSalesforceInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String ExternalIdSplit__c;

				public String getExternalIdSplit__c () {
					return this.ExternalIdSplit__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.ExternalIdSplit__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.ExternalIdSplit__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",ExternalIdSplit__c="+ExternalIdSplit__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_LOAD_CaseComment_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;
 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_1", false);
		start_Hash.put("tSalesforceInput_1", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_1";

	
		int tos_count_tSalesforceInput_1 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_1 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_1 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_1.createRuntimeProperties();
 		                    props_tSalesforceInput_1.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_1.setValue("condition",
 		                    "");
 		                    
 		                    props_tSalesforceInput_1.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_1.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_1.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_1.module.setValue("moduleName",
 		                    "Case");
 		                    
 		                    props_tSalesforceInput_1.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"Case\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ExternalIdSplit__c\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ExternalIdSplit__c\",\"talend.field.dbColumnName\":\"ExternalIdSplit__c\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ExternalIdSplit__c\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"Case\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_1_1_fisrt sst_tSalesforceInput_1_1_fisrt = new SchemaSettingTool_tSalesforceInput_1_1_fisrt();
 		                    
 		                    props_tSalesforceInput_1.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_1_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_1.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_1);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_1.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_1);
        }
    }
globalMap.put("tSalesforceInput_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.1");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.25.3");
java.net.URL mappings_url_tSalesforceInput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_1_MAPPINGS_URL", mappings_url_tSalesforceInput_1);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_1 = null;
topology_tSalesforceInput_1 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_1 = def_tSalesforceInput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_1, topology_tSalesforceInput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_1 = def_tSalesforceInput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_1 = componentRuntime_tSalesforceInput_1.initialize(container_tSalesforceInput_1, props_tSalesforceInput_1);

if (initVr_tSalesforceInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_1.getMessage());
}

if(componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_1;
	compDriverInitialization_tSalesforceInput_1.runAtDriver(container_tSalesforceInput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_1 = null;
if(componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_1;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_1 = sourceOrSink_tSalesforceInput_1.validate(container_tSalesforceInput_1);
	if (vr_tSalesforceInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_1.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_1 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_1;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_1 =
            source_tSalesforceInput_1.createReader(container_tSalesforceInput_1);
	reader_tSalesforceInput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_1, container_tSalesforceInput_1);

        boolean multi_output_is_allowed_tSalesforceInput_1 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_1 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_1.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_1 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_1 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_1 = props_tSalesforceInput_1.getSchema(c_tSalesforceInput_1, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_1 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_1, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_1 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_1 = reader_tSalesforceInput_1.start();

    resourceMap.put("reader_tSalesforceInput_1", reader_tSalesforceInput_1);

    for (; available_tSalesforceInput_1; available_tSalesforceInput_1 = reader_tSalesforceInput_1.advance()) {
    	nb_line_tSalesforceInput_1++;

    	
        if (multi_output_is_allowed_tSalesforceInput_1) {
                row2 = null;

        }

        try {
            Object data_tSalesforceInput_1 = reader_tSalesforceInput_1.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_1) {
                    row2 = new row2Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_1 == null) {
            factory_tSalesforceInput_1 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_1.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_1.setWrapped(factory_tSalesforceInput_1.convertToAvro(data_tSalesforceInput_1));
                Object columnValue_0_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(0);
                        row2.Id = (String) (columnValue_0_tSalesforceInput_1);
                Object columnValue_1_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(1);
                        row2.ExternalIdSplit__c = (String) (columnValue_1_tSalesforceInput_1);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_1) {
        	java.util.Map<String,Object> info_tSalesforceInput_1 = e_tSalesforceInput_1.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_1 = null;
            	if(info_tSalesforceInput_1.containsKey("error")){
            		errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("error");
        		}else if(info_tSalesforceInput_1.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_1 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_1 = "Row "+ nb_line_tSalesforceInput_1 + ": "+errorMessage_tSalesforceInput_1;
    			System.err.println(errorMessage_tSalesforceInput_1);
            	// If the record is reject, the main line record should put NULL
            	row2 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_1 = null;


 



/**
 * [tSalesforceInput_1 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_1 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 


	tos_count_tSalesforceInput_1++;

/**
 * [tSalesforceInput_1 main ] stop
 */
	
	/**
	 * [tSalesforceInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 



/**
 * [tSalesforceInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		



    
		row2Struct oneRow_tHashOutput_2 = new row2Struct();
				
					oneRow_tHashOutput_2.Id = row2.Id;
					oneRow_tHashOutput_2.ExternalIdSplit__c = row2.ExternalIdSplit__c;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;
 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 



/**
 * [tSalesforceInput_1 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_1 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_1", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_1.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_1 = reader_tSalesforceInput_1.getReturnValues();
if(resultMap_tSalesforceInput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_1 : resultMap_tSalesforceInput_1.entrySet()) {
		switch(entry_tSalesforceInput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "ERROR_MESSAGE", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_LINE", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_SUCCESS", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_REJECT", entry_tSalesforceInput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_1 = new StringBuilder();
            for (int i_tSalesforceInput_1 = 0; i_tSalesforceInput_1 < entry_tSalesforceInput_1.getKey().length(); i_tSalesforceInput_1++) {
                char ch_tSalesforceInput_1 = entry_tSalesforceInput_1.getKey().charAt(i_tSalesforceInput_1);
                if(Character.isUpperCase(ch_tSalesforceInput_1) && i_tSalesforceInput_1> 0) {
                	studio_key_tSalesforceInput_1.append('_');
                }
                studio_key_tSalesforceInput_1.append(ch_tSalesforceInput_1);
            }
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", studio_key_tSalesforceInput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_1.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_1", true);
end_Hash.put("tSalesforceInput_1", System.currentTimeMillis());




/**
 * [tSalesforceInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSalesforceInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tSalesforceInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_1 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_1")==null){
    if(resourceMap.get("reader_tSalesforceInput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_1")).close();
		} catch (java.io.IOException e_tSalesforceInput_1) {
			String errorMessage_tSalesforceInput_1 = "failed to release the resource in tSalesforceInput_1 :" + e_tSalesforceInput_1.getMessage();
			System.err.println(errorMessage_tSalesforceInput_1);
		}
	}
}
 



/**
 * [tSalesforceInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];

	
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public boolean IsPublished;

				public boolean getIsPublished () {
					return this.IsPublished;
				}
				
			    public String CommentBody;

				public String getCommentBody () {
					return this.CommentBody;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String LastModifiedById;

				public String getLastModifiedById () {
					return this.LastModifiedById;
				}
				
			    public String salesforce_id;

				public String getSalesforce_id () {
					return this.salesforce_id;
				}
				
			    public String salesforce_created;

				public String getSalesforce_created () {
					return this.salesforce_created;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.ParentId = readString(dis);
					
			        this.IsPublished = dis.readBoolean();
					
					this.CommentBody = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModifiedById = readString(dis);
					
					this.salesforce_id = readString(dis);
					
					this.salesforce_created = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ParentId,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsPublished);
					
					// String
				
						writeString(this.CommentBody,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.LastModifiedById,dos);
					
					// String
				
						writeString(this.salesforce_id,dos);
					
					// String
				
						writeString(this.salesforce_created,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ParentId="+ParentId);
		sb.append(",IsPublished="+String.valueOf(IsPublished));
		sb.append(",CommentBody="+CommentBody);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModifiedById="+LastModifiedById);
		sb.append(",salesforce_id="+salesforce_id);
		sb.append(",salesforce_created="+salesforce_created);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];

	
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public boolean IsPublished;

				public boolean getIsPublished () {
					return this.IsPublished;
				}
				
			    public String CommentBody;

				public String getCommentBody () {
					return this.CommentBody;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String LastModifiedById;

				public String getLastModifiedById () {
					return this.LastModifiedById;
				}
				
			    public String error;

				public String getError () {
					return this.error;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.ParentId = readString(dis);
					
			        this.IsPublished = dis.readBoolean();
					
					this.CommentBody = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModifiedById = readString(dis);
					
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ParentId,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsPublished);
					
					// String
				
						writeString(this.CommentBody,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.LastModifiedById,dos);
					
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ParentId="+ParentId);
		sb.append(",IsPublished="+String.valueOf(IsPublished));
		sb.append(",CommentBody="+CommentBody);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModifiedById="+LastModifiedById);
		sb.append(",error="+error);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CaseCommentStruct implements routines.system.IPersistableRow<CaseCommentStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];

	
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public boolean IsPublished;

				public boolean getIsPublished () {
					return this.IsPublished;
				}
				
			    public String CommentBody;

				public String getCommentBody () {
					return this.CommentBody;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String LastModifiedById;

				public String getLastModifiedById () {
					return this.LastModifiedById;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.ParentId = readString(dis);
					
			        this.IsPublished = dis.readBoolean();
					
					this.CommentBody = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModifiedById = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ParentId,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsPublished);
					
					// String
				
						writeString(this.CommentBody,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.LastModifiedById,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ParentId="+ParentId);
		sb.append(",IsPublished="+String.valueOf(IsPublished));
		sb.append(",CommentBody="+CommentBody);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModifiedById="+LastModifiedById);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CaseCommentStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public boolean IsPublished;

				public boolean getIsPublished () {
					return this.IsPublished;
				}
				
			    public String CommentBody;

				public String getCommentBody () {
					return this.CommentBody;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date SystemModstamp;

				public java.util.Date getSystemModstamp () {
					return this.SystemModstamp;
				}
				
			    public java.util.Date LastModifiedDate;

				public java.util.Date getLastModifiedDate () {
					return this.LastModifiedDate;
				}
				
			    public String LastModifiedById;

				public String getLastModifiedById () {
					return this.LastModifiedById;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.ParentId = readString(dis);
					
			        this.IsPublished = dis.readBoolean();
					
					this.CommentBody = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.SystemModstamp = readDate(dis);
					
					this.LastModifiedDate = readDate(dis);
					
					this.LastModifiedById = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsPublished);
					
					// String
				
						writeString(this.CommentBody,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.SystemModstamp,dos);
					
					// java.util.Date
				
						writeDate(this.LastModifiedDate,dos);
					
					// String
				
						writeString(this.LastModifiedById,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",ParentId="+ParentId);
		sb.append(",IsPublished="+String.valueOf(IsPublished));
		sb.append(",CommentBody="+CommentBody);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",SystemModstamp="+String.valueOf(SystemModstamp));
		sb.append(",LastModifiedDate="+String.valueOf(LastModifiedDate));
		sb.append(",LastModifiedById="+LastModifiedById);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tSalesforceInput_3Struct implements routines.system.IPersistableRow<after_tSalesforceInput_3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public boolean IsPublished;

				public boolean getIsPublished () {
					return this.IsPublished;
				}
				
			    public String CommentBody;

				public String getCommentBody () {
					return this.CommentBody;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date SystemModstamp;

				public java.util.Date getSystemModstamp () {
					return this.SystemModstamp;
				}
				
			    public java.util.Date LastModifiedDate;

				public java.util.Date getLastModifiedDate () {
					return this.LastModifiedDate;
				}
				
			    public String LastModifiedById;

				public String getLastModifiedById () {
					return this.LastModifiedById;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.ParentId = readString(dis);
					
			        this.IsPublished = dis.readBoolean();
					
					this.CommentBody = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.SystemModstamp = readDate(dis);
					
					this.LastModifiedDate = readDate(dis);
					
					this.LastModifiedById = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsPublished);
					
					// String
				
						writeString(this.CommentBody,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.SystemModstamp,dos);
					
					// java.util.Date
				
						writeDate(this.LastModifiedDate,dos);
					
					// String
				
						writeString(this.LastModifiedById,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",ParentId="+ParentId);
		sb.append(",IsPublished="+String.valueOf(IsPublished));
		sb.append(",CommentBody="+CommentBody);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",SystemModstamp="+String.valueOf(SystemModstamp));
		sb.append(",LastModifiedDate="+String.valueOf(LastModifiedDate));
		sb.append(",LastModifiedById="+LastModifiedById);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tSalesforceInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);
		tHashInput_3Process(globalMap);
		tHashInput_1Process(globalMap);

		row3Struct row3 = new row3Struct();
CaseCommentStruct CaseComment = new CaseCommentStruct();
row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();





	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", false);
		start_Hash.put("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceOutputBulk";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("CaseComment" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk =
        new org.talend.components.salesforce.tsalesforceoutputbulk.TSalesforceOutputBulkDefinition();

org.talend.components.salesforce.tsalesforceoutputbulk.TSalesforceOutputBulkProperties props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk =
        (org.talend.components.salesforce.tsalesforceoutputbulk.TSalesforceOutputBulkProperties) def_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.createRuntimeProperties();
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.setValue("ignoreNull",
 		                    false);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.setValue("outputAction",
 		                        org.talend.components.salesforce.SalesforceOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.setValue("bulkFilePath",
 		                    context.ProjetFolder+context.OutFileFolder+context.Output+TalendDate.getDate("CCYYMMDD")+jobName+"_bulk.csv");
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.setValue("append",
 		                    false);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.upsertRelationTable.setValue("polymorphic",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"CaseComment\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsPublished\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsPublished\",\"talend.field.dbColumnName\":\"IsPublished\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsPublished\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CommentBody\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CommentBody\",\"talend.field.dbColumnName\":\"CommentBody\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"4000\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CommentBody\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LastModifiedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"LastModifiedById\",\"talend.field.dbColumnName\":\"LastModifiedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"LastModifiedById\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"CaseComment\",\"di.table.label\":\"CaseComment\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk_1_fisrt sst_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk_1_fisrt = new SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk_1_fisrt();
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.schema.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk_1_fisrt.getSchemaValue()));
 		                    
globalMap.put("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.1");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.25.3");
java.net.URL mappings_url_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk_MAPPINGS_URL", mappings_url_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);

org.talend.components.api.container.RuntimeContainer container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceOutputBulkExec_1_tSalesforceOutputBulk";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = null;
topology_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = def_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk, topology_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = def_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.initialize(container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk, props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);

if (initVr_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getMessage());
}

if(componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk;
	compDriverInitialization_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.runAtDriver(container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = null;
if(componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = sourceOrSink_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.validate(container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
	if (vr_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getMessage());
	}
}

    org.talend.components.api.component.runtime.Sink sink_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk =
            (org.talend.components.api.component.runtime.Sink)sourceOrSink_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk;
    org.talend.components.api.component.runtime.WriteOperation writeOperation_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = sink_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.createWriteOperation();
    writeOperation_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.initialize(container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
    org.talend.components.api.component.runtime.Writer writer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = writeOperation_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.createWriter(container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
    writer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.open("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk");

    resourceMap.put("writer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", writer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);

    org.talend.components.api.component.Connector c_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getSchema(c_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk, false);
    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk
            = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = null;


 



/**
 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CreatedByStruct> tHash_Lookup_CreatedBy = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CreatedByStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CreatedByStruct>) 
					globalMap.get( "tHash_Lookup_CreatedBy" ))
					;					
					
	

CreatedByStruct CreatedByHashKey = new CreatedByStruct();
CreatedByStruct CreatedByDefault = new CreatedByStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ModifiedByStruct> tHash_Lookup_ModifiedBy = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ModifiedByStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ModifiedByStruct>) 
					globalMap.get( "tHash_Lookup_ModifiedBy" ))
					;					
					
	

ModifiedByStruct ModifiedByHashKey = new ModifiedByStruct();
ModifiedByStruct ModifiedByDefault = new ModifiedByStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CaseStruct> tHash_Lookup_Case = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CaseStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CaseStruct>) 
					globalMap.get( "tHash_Lookup_Case" ))
					;					
					
	

CaseStruct CaseHashKey = new CaseStruct();
CaseStruct CaseDefault = new CaseStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
CaseCommentStruct CaseComment_tmp = new CaseCommentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_3", false);
		start_Hash.put("tSalesforceInput_3", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_3";

	
		int tos_count_tSalesforceInput_3 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_3 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_3 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_3.createRuntimeProperties();
 		                    props_tSalesforceInput_3.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_3.setValue("condition",
 		                    "");
 		                    
 		                    props_tSalesforceInput_3.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_3.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_3.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_3.connection.setValue("endpoint",
 		                    "https://test.salesforce.com/services/Soap/u/39.0");
 		                    
 		                    props_tSalesforceInput_3.connection.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceInput_3.connection.setValue("reuseSession",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.connection.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.connection.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceInput_3.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceInput_3.connection.setValue("clientId",
 		                    "");
 		                    
 		                        props_tSalesforceInput_3.connection.userPassword.setValue("securityKey",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("db93785afade3a87aa72bbc66d89b290396f1e73fc9959bd92b780078721fc1a"));
 		                        
 		                    props_tSalesforceInput_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.connection.userPassword.setValue("userId",
 		                    "cillia.rabehi@comforth.eu.preprod");
 		                    
 		                        props_tSalesforceInput_3.connection.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("9d70c0b7ab5cb9d3f9c68991926fcd06"));
 		                        
 		                    props_tSalesforceInput_3.connection.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_3.module.setValue("moduleName",
 		                    "CaseComment");
 		                    
 		                    props_tSalesforceInput_3.module.connection.setValue("endpoint",
 		                    "https://test.salesforce.com/services/Soap/u/39.0");
 		                    
 		                    props_tSalesforceInput_3.module.connection.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceInput_3.module.connection.setValue("reuseSession",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.module.connection.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.module.connection.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceInput_3.module.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceInput_3.module.connection.setValue("clientId",
 		                    "");
 		                    
 		                        props_tSalesforceInput_3.module.connection.userPassword.setValue("securityKey",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("db93785afade3a87aa72bbc66d89b290396f1e73fc9959bd92b780078721fc1a"));
 		                        
 		                    props_tSalesforceInput_3.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.module.connection.userPassword.setValue("userId",
 		                    "cillia.rabehi@comforth.eu.preprod");
 		                    
 		                        props_tSalesforceInput_3.module.connection.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("9d70c0b7ab5cb9d3f9c68991926fcd06"));
 		                        
 		                    props_tSalesforceInput_3.module.connection.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_3_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"CaseComment\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsPublished\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsPublished\",\"talend.field.dbColumnName\":\"IsPublished\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsPublished\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CommentBody\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CommentBody\",\"talend.field.dbColumnName\":\"CommentBody\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"4000\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CommentBody\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"SystemModstamp\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"SystemModstamp\",\"talend.field.dbColumnName\":\"SystemModstamp\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"SystemModstamp\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LastModifiedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"LastModifiedDate\",\"talend.field.dbColumnName\":\"LastModifiedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"LastModifiedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LastModifiedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"LastModifiedById\",\"talend.field.dbColumnName\":\"LastModifiedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"LastModifiedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"CaseComment\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_3_1_fisrt sst_tSalesforceInput_3_1_fisrt = new SchemaSettingTool_tSalesforceInput_3_1_fisrt();
 		                    
 		                    props_tSalesforceInput_3.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_3_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_3.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_3 = props_tSalesforceInput_3.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_3.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_3);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_3.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_3 = props_tSalesforceInput_3.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_3.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_3);
        }
    }
globalMap.put("tSalesforceInput_3_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.1");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.25.3");
java.net.URL mappings_url_tSalesforceInput_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_3_MAPPINGS_URL", mappings_url_tSalesforceInput_3);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_3 = null;
topology_tSalesforceInput_3 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_3 = def_tSalesforceInput_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_3, topology_tSalesforceInput_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_3 = def_tSalesforceInput_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_3 = componentRuntime_tSalesforceInput_3.initialize(container_tSalesforceInput_3, props_tSalesforceInput_3);

if (initVr_tSalesforceInput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_3.getMessage());
}

if(componentRuntime_tSalesforceInput_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_3;
	compDriverInitialization_tSalesforceInput_3.runAtDriver(container_tSalesforceInput_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_3 = null;
if(componentRuntime_tSalesforceInput_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_3;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_3 = sourceOrSink_tSalesforceInput_3.validate(container_tSalesforceInput_3);
	if (vr_tSalesforceInput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_3.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_3 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_3;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_3 =
            source_tSalesforceInput_3.createReader(container_tSalesforceInput_3);
	reader_tSalesforceInput_3 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_3, container_tSalesforceInput_3);

        boolean multi_output_is_allowed_tSalesforceInput_3 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_3 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_3.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_3 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_3 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_3 = props_tSalesforceInput_3.getSchema(c_tSalesforceInput_3, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_3 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_3, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_3 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_3 = reader_tSalesforceInput_3.start();

    resourceMap.put("reader_tSalesforceInput_3", reader_tSalesforceInput_3);

    for (; available_tSalesforceInput_3; available_tSalesforceInput_3 = reader_tSalesforceInput_3.advance()) {
    	nb_line_tSalesforceInput_3++;

    	
        if (multi_output_is_allowed_tSalesforceInput_3) {
                row3 = null;

        }

        try {
            Object data_tSalesforceInput_3 = reader_tSalesforceInput_3.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_3) {
                    row3 = new row3Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_3 == null) {
            factory_tSalesforceInput_3 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_3.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_3.setWrapped(factory_tSalesforceInput_3.convertToAvro(data_tSalesforceInput_3));
                Object columnValue_0_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(0);
                        row3.Id = (String) (columnValue_0_tSalesforceInput_3);
                Object columnValue_1_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(1);
                        row3.ParentId = (String) (columnValue_1_tSalesforceInput_3);
                Object columnValue_2_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(2);
                    if (columnValue_2_tSalesforceInput_3 == null) {
                        row3.IsPublished = false;
                    } else {
                            row3.IsPublished = (boolean) (columnValue_2_tSalesforceInput_3);
                    }
                Object columnValue_3_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(3);
                        row3.CommentBody = (String) (columnValue_3_tSalesforceInput_3);
                Object columnValue_4_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(4);
                        row3.CreatedById = (String) (columnValue_4_tSalesforceInput_3);
                Object columnValue_5_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(5);
                        row3.CreatedDate = (java.util.Date) (columnValue_5_tSalesforceInput_3);
                Object columnValue_6_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(6);
                        row3.SystemModstamp = (java.util.Date) (columnValue_6_tSalesforceInput_3);
                Object columnValue_7_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(7);
                        row3.LastModifiedDate = (java.util.Date) (columnValue_7_tSalesforceInput_3);
                Object columnValue_8_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(8);
                        row3.LastModifiedById = (String) (columnValue_8_tSalesforceInput_3);
                Object columnValue_9_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(9);
                    if (columnValue_9_tSalesforceInput_3 == null) {
                        row3.IsDeleted = false;
                    } else {
                            row3.IsDeleted = (boolean) (columnValue_9_tSalesforceInput_3);
                    }
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_3) {
        	java.util.Map<String,Object> info_tSalesforceInput_3 = e_tSalesforceInput_3.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_3 = null;
            	if(info_tSalesforceInput_3.containsKey("error")){
            		errorMessage_tSalesforceInput_3 = info_tSalesforceInput_3.get("error");
        		}else if(info_tSalesforceInput_3.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_3 = info_tSalesforceInput_3.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_3 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_3 = "Row "+ nb_line_tSalesforceInput_3 + ": "+errorMessage_tSalesforceInput_3;
    			System.err.println(errorMessage_tSalesforceInput_3);
            	// If the record is reject, the main line record should put NULL
            	row3 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_3 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_3 = null;


 



/**
 * [tSalesforceInput_3 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_3 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	


 


	tos_count_tSalesforceInput_3++;

/**
 * [tSalesforceInput_3 main ] stop
 */
	
	/**
	 * [tSalesforceInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	


 



/**
 * [tSalesforceInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "CreatedBy" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopCreatedBy = false;
       		  	    	
       		  	    	
 							CreatedByStruct CreatedByObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		CreatedByHashKey.ExternalIdSplit__c = row3.CreatedById;
                        		    		

								
		                        	CreatedByHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_CreatedBy.lookup( CreatedByHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_CreatedBy != null && tHash_Lookup_CreatedBy.getCount(CreatedByHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'CreatedBy' and it contains more one result from keys :  CreatedBy.ExternalIdSplit__c = '" + CreatedByHashKey.ExternalIdSplit__c + "'");
								} // G 071
							

							CreatedByStruct CreatedBy = null;
                    		  	 
							   
                    		  	 
	       		  	    	CreatedByStruct fromLookup_CreatedBy = null;
							CreatedBy = CreatedByDefault;
										 
							
								 
							
							
								if (tHash_Lookup_CreatedBy !=null && tHash_Lookup_CreatedBy.hasNext()) { // G 099
								
							
								
								fromLookup_CreatedBy = tHash_Lookup_CreatedBy.next();

							
							
								} // G 099
							
							

							if(fromLookup_CreatedBy != null) {
								CreatedBy = fromLookup_CreatedBy;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ModifiedBy" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopModifiedBy = false;
       		  	    	
       		  	    	
 							ModifiedByStruct ModifiedByObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ModifiedByHashKey.ExternalIdSplit__c = row3.LastModifiedById;
                        		    		

								
		                        	ModifiedByHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ModifiedBy.lookup( ModifiedByHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ModifiedBy != null && tHash_Lookup_ModifiedBy.getCount(ModifiedByHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ModifiedBy' and it contains more one result from keys :  ModifiedBy.ExternalIdSplit__c = '" + ModifiedByHashKey.ExternalIdSplit__c + "'");
								} // G 071
							

							ModifiedByStruct ModifiedBy = null;
                    		  	 
							   
                    		  	 
	       		  	    	ModifiedByStruct fromLookup_ModifiedBy = null;
							ModifiedBy = ModifiedByDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ModifiedBy !=null && tHash_Lookup_ModifiedBy.hasNext()) { // G 099
								
							
								
								fromLookup_ModifiedBy = tHash_Lookup_ModifiedBy.next();

							
							
								} // G 099
							
							

							if(fromLookup_ModifiedBy != null) {
								ModifiedBy = fromLookup_ModifiedBy;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Case" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopCase = false;
       		  	    	
       		  	    	
 							CaseStruct CaseObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		CaseHashKey.ExternalIdSplit__c = row3.ParentId;
                        		    		

								
		                        	CaseHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Case.lookup( CaseHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Case != null && tHash_Lookup_Case.getCount(CaseHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Case' and it contains more one result from keys :  Case.ExternalIdSplit__c = '" + CaseHashKey.ExternalIdSplit__c + "'");
								} // G 071
							

							CaseStruct Case = null;
                    		  	 
							   
                    		  	 
	       		  	    	CaseStruct fromLookup_Case = null;
							Case = CaseDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Case !=null && tHash_Lookup_Case.hasNext()) { // G 099
								
							
								
								fromLookup_Case = tHash_Lookup_Case.next();

							
							
								} // G 099
							
							

							if(fromLookup_Case != null) {
								Case = fromLookup_Case;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

CaseComment = null;


// # Output table : 'CaseComment'
CaseComment_tmp.ParentId = Case.Id ;
CaseComment_tmp.IsPublished = row3.IsPublished;
CaseComment_tmp.CommentBody = row3.CommentBody;
CaseComment_tmp.CreatedById = CreatedBy.Id ;
CaseComment_tmp.CreatedDate = row3.CreatedDate;
CaseComment_tmp.LastModifiedById = ModifiedBy.Id ;
CaseComment = CaseComment_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "CaseComment"
if(CaseComment != null) { 



	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk main ] start
	 */

	

	
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceOutputBulk";

	

			//CaseComment
			//CaseComment


			
				if(execStat){
					runStat.updateStatOnConnection("CaseComment"+iterateId,1, 1);
				} 
			

		

            incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.createNewRecord();
                    //skip the put action if the input column doesn't appear in component runtime schema
                    if (incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getRuntimeSchema().getField("ParentId") != null){
                        incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.put("ParentId", CaseComment.ParentId);
                    }
                    //skip the put action if the input column doesn't appear in component runtime schema
                    if (incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getRuntimeSchema().getField("IsPublished") != null){
                        incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.put("IsPublished", CaseComment.IsPublished);
                    }
                    //skip the put action if the input column doesn't appear in component runtime schema
                    if (incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getRuntimeSchema().getField("CommentBody") != null){
                        incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.put("CommentBody", CaseComment.CommentBody);
                    }
                    //skip the put action if the input column doesn't appear in component runtime schema
                    if (incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getRuntimeSchema().getField("CreatedById") != null){
                        incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.put("CreatedById", CaseComment.CreatedById);
                    }
                    //skip the put action if the input column doesn't appear in component runtime schema
                    if (incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getRuntimeSchema().getField("CreatedDate") != null){
                        incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.put("CreatedDate", CaseComment.CreatedDate);
                    }
                    //skip the put action if the input column doesn't appear in component runtime schema
                    if (incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getRuntimeSchema().getField("LastModifiedById") != null){
                        incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.put("LastModifiedById", CaseComment.LastModifiedById);
                    }
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.setValue("bulkFilePath",
 		                    context.ProjetFolder+context.OutFileFolder+context.Output+TalendDate.getDate("CCYYMMDD")+jobName+"_bulk.csv");
 		                    
            org.apache.avro.generic.IndexedRecord data_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = incomingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getCurrentRecord();
            

            writer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.write(data_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
            
            nb_line_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk++;

 


	tos_count_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk++;

/**
 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk main ] stop
 */
	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceOutputBulk";

	


 



/**
 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk process_data_begin ] stop
 */
	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceOutputBulk";

	


 



/**
 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk process_data_end ] stop
 */

} // End of branch "CaseComment"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	


 



/**
 * [tSalesforceInput_3 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_3 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_3", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_3.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_3 = reader_tSalesforceInput_3.getReturnValues();
if(resultMap_tSalesforceInput_3!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_3 : resultMap_tSalesforceInput_3.entrySet()) {
		switch(entry_tSalesforceInput_3.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "ERROR_MESSAGE", entry_tSalesforceInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "NB_LINE", entry_tSalesforceInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "NB_SUCCESS", entry_tSalesforceInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "NB_REJECT", entry_tSalesforceInput_3.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_3 = new StringBuilder();
            for (int i_tSalesforceInput_3 = 0; i_tSalesforceInput_3 < entry_tSalesforceInput_3.getKey().length(); i_tSalesforceInput_3++) {
                char ch_tSalesforceInput_3 = entry_tSalesforceInput_3.getKey().charAt(i_tSalesforceInput_3);
                if(Character.isUpperCase(ch_tSalesforceInput_3) && i_tSalesforceInput_3> 0) {
                	studio_key_tSalesforceInput_3.append('_');
                }
                studio_key_tSalesforceInput_3.append(ch_tSalesforceInput_3);
            }
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", studio_key_tSalesforceInput_3.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_3.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_3", true);
end_Hash.put("tSalesforceInput_3", System.currentTimeMillis());




/**
 * [tSalesforceInput_3 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_CreatedBy != null) {
						tHash_Lookup_CreatedBy.endGet();
					}
					globalMap.remove( "tHash_Lookup_CreatedBy" );

					
					
				
					if(tHash_Lookup_ModifiedBy != null) {
						tHash_Lookup_ModifiedBy.endGet();
					}
					globalMap.remove( "tHash_Lookup_ModifiedBy" );

					
					
				
					if(tHash_Lookup_Case != null) {
						tHash_Lookup_Case.endGet();
					}
					globalMap.remove( "tHash_Lookup_Case" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk end ] start
	 */

	

	
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceOutputBulk";

	
// end of generic


resourceMap.put("finish_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", Boolean.TRUE);

    org.talend.components.api.component.runtime.Result resultObject_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = (org.talend.components.api.component.runtime.Result)writer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.close();
    final java.util.Map<String, Object> resultMap_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = writer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk), container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
if(resultMap_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk : resultMap_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.entrySet()) {
		switch(entry_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.setComponentData("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", "ERROR_MESSAGE", entry_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.setComponentData("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", "NB_LINE", entry_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.setComponentData("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", "NB_SUCCESS", entry_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.setComponentData("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", "NB_REJECT", entry_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = new StringBuilder();
            for (int i_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = 0; i_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk < entry_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getKey().length(); i_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk++) {
                char ch_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = entry_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getKey().charAt(i_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
                if(Character.isUpperCase(ch_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk) && i_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk> 0) {
                	studio_key_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.append('_');
                }
                studio_key_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.append(ch_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
            }
			container_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.setComponentData("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", studio_key_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getValue());
			break;
		}
	}
}

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("CaseComment"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", true);
end_Hash.put("tSalesforceOutputBulkExec_1_tSalesforceOutputBulk", System.currentTimeMillis());




/**
 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk end ] stop
 */


	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.ProjetFolder+context.OutFileFolder+context.Success+TalendDate.getDate("CCYYMMDDhhmm")+jobName+"_Success.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("ParentId");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("IsPublished");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CommentBody");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CreatedById");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CreatedDate");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("LastModifiedById");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("salesforce_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("salesforce_created");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
    resourceMap.put("isFileGenerated_tFileOutputDelimited_1", isFileGenerated_tFileOutputDelimited_1);
        resourceMap.put("filetFileOutputDelimited_1", filetFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.ProjetFolder+context.OutFileFolder+context.Error+TalendDate.getDate("CCYYMMDDhhmm")+jobName+"_Error.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("ParentId");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IsPublished");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CommentBody");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CreatedById");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CreatedDate");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("LastModifiedById");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("error");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
    resourceMap.put("isFileGenerated_tFileOutputDelimited_2", isFileGenerated_tFileOutputDelimited_2);
        resourceMap.put("filetFileOutputDelimited_2", filetFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceOutputBulkExec_1_tSalesforceBulkExec", false);
		start_Hash.put("tSalesforceOutputBulkExec_1_tSalesforceBulkExec", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceBulkExec";

	
		int tos_count_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceOutputBulkExec_1_tSalesforceBulkExec =
        new org.talend.components.salesforce.tsalesforcebulkexec.TSalesforceBulkExecDefinition();

org.talend.components.salesforce.tsalesforcebulkexec.TSalesforceBulkExecProperties props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec =
        (org.talend.components.salesforce.tsalesforcebulkexec.TSalesforceBulkExecProperties) def_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.createRuntimeProperties();
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.setValue("bulkFilePath",
 		                    context.ProjetFolder+context.OutFileFolder+context.Output+TalendDate.getDate("CCYYMMDD")+jobName+"_bulk.csv");
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.setValue("outputAction",
 		                        org.talend.components.salesforce.SalesforceOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.bulkProperties.setValue("concurrencyMode",
 		                        org.talend.components.salesforce.SalesforceBulkProperties.Concurrency.Parallel);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.bulkProperties.setValue("bytesToCommit",
 		                    10485760);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.bulkProperties.setValue("rowsToCommit",
 		                    10000);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.bulkProperties.setValue("waitTimeCheckBatchState",
 		                    10000);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.upsertRelationTable.setValue("polymorphic",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"output\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsPublished\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsPublished\",\"talend.field.dbColumnName\":\"IsPublished\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsPublished\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CommentBody\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CommentBody\",\"talend.field.dbColumnName\":\"CommentBody\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"4000\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CommentBody\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LastModifiedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"LastModifiedById\",\"talend.field.dbColumnName\":\"LastModifiedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"LastModifiedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"salesforce_id\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"salesforce_created\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"CaseComment\",\"di.table.label\":\"CaseComment\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_1_fisrt sst_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_1_fisrt = new SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_1_fisrt();
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsPublished\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsPublished\",\"talend.field.dbColumnName\":\"IsPublished\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsPublished\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CommentBody\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CommentBody\",\"talend.field.dbColumnName\":\"CommentBody\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"4000\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CommentBody\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LastModifiedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"LastModifiedById\",\"talend.field.dbColumnName\":\"LastModifiedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"LastModifiedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"error\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"CaseComment\",\"di.table.label\":\"CaseComment\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_2_fisrt sst_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_2_fisrt = new SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_2_fisrt();
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.setValue("moduleName",
 		                    "CaseComment");
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"CaseComment\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsPublished\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsPublished\",\"talend.field.dbColumnName\":\"IsPublished\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsPublished\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CommentBody\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CommentBody\",\"talend.field.dbColumnName\":\"CommentBody\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"4000\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CommentBody\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LastModifiedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"LastModifiedById\",\"talend.field.dbColumnName\":\"LastModifiedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"LastModifiedById\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"CaseComment\",\"di.table.label\":\"CaseComment\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_3_fisrt sst_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_3_fisrt = new SchemaSettingTool_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_3_fisrt();
 		                    
 		                    props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceOutputBulkExec_1_tSalesforceBulkExec_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceOutputBulkExec_1_tSalesforceBulkExec != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceOutputBulkExec_1_tSalesforceBulkExec + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceOutputBulkExec_1_tSalesforceBulkExec != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceOutputBulkExec_1_tSalesforceBulkExec + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
        }
    }
globalMap.put("tSalesforceOutputBulkExec_1_tSalesforceBulkExec_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.1");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.25.3");
java.net.URL mappings_url_tSalesforceOutputBulkExec_1_tSalesforceBulkExec= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceOutputBulkExec_1_tSalesforceBulkExec_MAPPINGS_URL", mappings_url_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);

org.talend.components.api.container.RuntimeContainer container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceOutputBulkExec_1_tSalesforceBulkExec";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = null;
topology_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = def_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec, topology_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = def_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.initialize(container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec, props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);

if (initVr_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getMessage());
}

if(componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceBulkExec instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceBulkExec;
	compDriverInitialization_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.runAtDriver(container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = null;
if(componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceBulkExec instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceOutputBulkExec_1_tSalesforceBulkExec;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = sourceOrSink_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.validate(container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
	if (vr_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceOutputBulkExec_1_tSalesforceBulkExec =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceOutputBulkExec_1_tSalesforceBulkExec;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec =
            source_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.createReader(container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
	reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec, container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);

        boolean multi_output_is_allowed_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = false;
        org.talend.components.api.component.Connector c_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = props_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getSchema(c_tSalesforceOutputBulkExec_1_tSalesforceBulkExec, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceOutputBulkExec_1_tSalesforceBulkExec, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.start();

    resourceMap.put("reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec", reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);

    for (; available_tSalesforceOutputBulkExec_1_tSalesforceBulkExec; available_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.advance()) {
    	nb_line_tSalesforceOutputBulkExec_1_tSalesforceBulkExec++;

    	
        if (multi_output_is_allowed_tSalesforceOutputBulkExec_1_tSalesforceBulkExec) {
                row4 = null;

                row5 = null;
        }

        try {
            Object data_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getCurrent();

                if(multi_output_is_allowed_tSalesforceOutputBulkExec_1_tSalesforceBulkExec) {
                    row4 = new row4Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceOutputBulkExec_1_tSalesforceBulkExec == null) {
            factory_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.setWrapped(factory_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.convertToAvro(data_tSalesforceOutputBulkExec_1_tSalesforceBulkExec));
                Object columnValue_0_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(0);
                        row4.ParentId = (String) (columnValue_0_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                Object columnValue_1_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(1);
                    if (columnValue_1_tSalesforceOutputBulkExec_1_tSalesforceBulkExec == null) {
                        row4.IsPublished = false;
                    } else {
                            row4.IsPublished = (boolean) (columnValue_1_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                    }
                Object columnValue_2_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(2);
                        row4.CommentBody = (String) (columnValue_2_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                Object columnValue_3_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(3);
                        row4.CreatedById = (String) (columnValue_3_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                Object columnValue_4_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(4);
                        row4.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                Object columnValue_5_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(5);
                        row4.LastModifiedById = (String) (columnValue_5_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                Object columnValue_6_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(6);
                        row4.salesforce_id = (String) (columnValue_6_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                Object columnValue_7_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(7);
                        row4.salesforce_created = (String) (columnValue_7_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceOutputBulkExec_1_tSalesforceBulkExec) {
        	java.util.Map<String,Object> info_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = e_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getRejectInfo();
                Object data_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = info_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get("talend_record");

                if (multi_output_is_allowed_tSalesforceOutputBulkExec_1_tSalesforceBulkExec) {
                    row5 = new row5Struct();
                }
				try{
        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceOutputBulkExec_1_tSalesforceBulkExec == null) {
            factory_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.setWrapped(factory_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.convertToAvro(data_tSalesforceOutputBulkExec_1_tSalesforceBulkExec));
                Object columnValue_0_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(0);
                        row5.ParentId = (String) (columnValue_0_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                Object columnValue_1_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(1);
                    if (columnValue_1_tSalesforceOutputBulkExec_1_tSalesforceBulkExec == null) {
                        row5.IsPublished = false;
                    } else {
                            row5.IsPublished = (boolean) (columnValue_1_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                    }
                Object columnValue_2_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(2);
                        row5.CommentBody = (String) (columnValue_2_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                Object columnValue_3_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(3);
                        row5.CreatedById = (String) (columnValue_3_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                Object columnValue_4_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(4);
                        row5.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                Object columnValue_5_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = outgoingEnforcer_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get(5);
                        row5.LastModifiedById = (String) (columnValue_5_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                }catch(java.lang.Exception e){
                	// do nothing
                }
                        row5.error = (String)info_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.get("error");
            	// If the record is reject, the main line record should put NULL
            	row4 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = null;


 



/**
 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec begin ] stop
 */
	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec main ] start
	 */

	

	
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceBulkExec";

	


 


	tos_count_tSalesforceOutputBulkExec_1_tSalesforceBulkExec++;

/**
 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec main ] stop
 */
	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceBulkExec";

	


 



/**
 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row4.ParentId != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.ParentId
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row4.IsPublished
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CommentBody != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CommentBody
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CreatedById != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CreatedById
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CreatedDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row4.CreatedDate, "yyyy-MM-dd'T'HH:mm:ss'.000Z'")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.LastModifiedById != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.LastModifiedById
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.salesforce_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.salesforce_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.salesforce_created != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.salesforce_created
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "row4"




// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row5.ParentId != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.ParentId
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row5.IsPublished
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.CommentBody != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.CommentBody
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.CreatedById != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.CreatedById
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.CreatedDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row5.CreatedDate, "yyyy-MM-dd'T'HH:mm:ss'.000Z'")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.LastModifiedById != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.LastModifiedById
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row5.error != null) {
                        sb_tFileOutputDelimited_2.append(
                            row5.error
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceBulkExec";

	


 



/**
 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec process_data_end ] stop
 */
	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec end ] start
	 */

	

	
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceBulkExec";

	
// end of generic


resourceMap.put("finish_tSalesforceOutputBulkExec_1_tSalesforceBulkExec", Boolean.TRUE);

    } // while
    reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.close();
    final java.util.Map<String, Object> resultMap_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getReturnValues();
if(resultMap_tSalesforceOutputBulkExec_1_tSalesforceBulkExec!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceOutputBulkExec_1_tSalesforceBulkExec : resultMap_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.entrySet()) {
		switch(entry_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.setComponentData("tSalesforceOutputBulkExec_1_tSalesforceBulkExec", "ERROR_MESSAGE", entry_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.setComponentData("tSalesforceOutputBulkExec_1_tSalesforceBulkExec", "NB_LINE", entry_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.setComponentData("tSalesforceOutputBulkExec_1_tSalesforceBulkExec", "NB_SUCCESS", entry_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.setComponentData("tSalesforceOutputBulkExec_1_tSalesforceBulkExec", "NB_REJECT", entry_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = new StringBuilder();
            for (int i_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = 0; i_tSalesforceOutputBulkExec_1_tSalesforceBulkExec < entry_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getKey().length(); i_tSalesforceOutputBulkExec_1_tSalesforceBulkExec++) {
                char ch_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = entry_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getKey().charAt(i_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
                if(Character.isUpperCase(ch_tSalesforceOutputBulkExec_1_tSalesforceBulkExec) && i_tSalesforceOutputBulkExec_1_tSalesforceBulkExec> 0) {
                	studio_key_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.append('_');
                }
                studio_key_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.append(ch_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
            }
			container_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.setComponentData("tSalesforceOutputBulkExec_1_tSalesforceBulkExec", studio_key_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceOutputBulkExec_1_tSalesforceBulkExec", true);
end_Hash.put("tSalesforceOutputBulkExec_1_tSalesforceBulkExec", System.currentTimeMillis());




/**
 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
			if(isFileGenerated_tFileOutputDelimited_1 && nb_line_tFileOutputDelimited_1 == 0){
				
					filetFileOutputDelimited_1.delete();
				
			}		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
			if(isFileGenerated_tFileOutputDelimited_2 && nb_line_tFileOutputDelimited_2 == 0){
				
					filetFileOutputDelimited_2.delete();
				
			}		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_CreatedBy"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ModifiedBy"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_Case"); 
				     			
				try{
					
	
	/**
	 * [tSalesforceInput_3 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_3")==null){
    if(resourceMap.get("reader_tSalesforceInput_3")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_3")).close();
		} catch (java.io.IOException e_tSalesforceInput_3) {
			String errorMessage_tSalesforceInput_3 = "failed to release the resource in tSalesforceInput_3 :" + e_tSalesforceInput_3.getMessage();
			System.err.println(errorMessage_tSalesforceInput_3);
		}
	}
}
 



/**
 * [tSalesforceInput_3 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceOutputBulk";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk")==null){
    if(resourceMap.get("writer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk")).close();
		} catch (java.io.IOException e_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk) {
			String errorMessage_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk = "failed to release the resource in tSalesforceOutputBulkExec_1_tSalesforceOutputBulk :" + e_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk.getMessage();
			System.err.println(errorMessage_tSalesforceOutputBulkExec_1_tSalesforceOutputBulk);
		}
	}
}
 



/**
 * [tSalesforceOutputBulkExec_1_tSalesforceOutputBulk finally ] stop
 */

	
	/**
	 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSalesforceOutputBulkExec_1";
	
	currentComponent="tSalesforceOutputBulkExec_1_tSalesforceBulkExec";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceOutputBulkExec_1_tSalesforceBulkExec")==null){
    if(resourceMap.get("reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceOutputBulkExec_1_tSalesforceBulkExec")).close();
		} catch (java.io.IOException e_tSalesforceOutputBulkExec_1_tSalesforceBulkExec) {
			String errorMessage_tSalesforceOutputBulkExec_1_tSalesforceBulkExec = "failed to release the resource in tSalesforceOutputBulkExec_1_tSalesforceBulkExec :" + e_tSalesforceOutputBulkExec_1_tSalesforceBulkExec.getMessage();
			System.err.println(errorMessage_tSalesforceOutputBulkExec_1_tSalesforceBulkExec);
		}
	}
}
 



/**
 * [tSalesforceOutputBulkExec_1_tSalesforceBulkExec finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
				if(Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_1"))) && Integer.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_1"))) == 0){
					
						((java.io.File)resourceMap.get("filetFileOutputDelimited_1")).delete();
					
				}		
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */




	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
				if(Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_2"))) && Integer.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_2"))) == 0){
					
						((java.io.File)resourceMap.get("filetFileOutputDelimited_2")).delete();
					
				}		
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class CreatedByStruct implements routines.system.IPersistableComparableLookupRow<CreatedByStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String ExternalIdSplit__c;

				public String getExternalIdSplit__c () {
					return this.ExternalIdSplit__c;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ExternalIdSplit__c == null) ? 0 : this.ExternalIdSplit__c.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CreatedByStruct other = (CreatedByStruct) obj;
		
						if (this.ExternalIdSplit__c == null) {
							if (other.ExternalIdSplit__c != null)
								return false;
						
						} else if (!this.ExternalIdSplit__c.equals(other.ExternalIdSplit__c))
						
							return false;
					

		return true;
    }

	public void copyDataTo(CreatedByStruct other) {

		other.Id = this.Id;
	            other.ExternalIdSplit__c = this.ExternalIdSplit__c;
	            
	}

	public void copyKeysDataTo(CreatedByStruct other) {

		other.ExternalIdSplit__c = this.ExternalIdSplit__c;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.ExternalIdSplit__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ExternalIdSplit__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",ExternalIdSplit__c="+ExternalIdSplit__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CreatedByStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ExternalIdSplit__c, other.ExternalIdSplit__c);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		CreatedByStruct CreatedBy = new CreatedByStruct();




	
	/**
	 * [tAdvancedHash_CreatedBy begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_CreatedBy", false);
		start_Hash.put("tAdvancedHash_CreatedBy", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_CreatedBy";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("CreatedBy" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_CreatedBy = 0;
		

			   		// connection name:CreatedBy
			   		// source node:tHashInput_2 - inputs:(after_tSalesforceInput_3) outputs:(CreatedBy,CreatedBy) | target node:tAdvancedHash_CreatedBy - inputs:(CreatedBy) outputs:()
			   		// linked node: tMap_1 - inputs:(row3,CreatedBy,ModifiedBy,Case) outputs:(CaseComment)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_CreatedBy = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CreatedByStruct> tHash_Lookup_CreatedBy =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<CreatedByStruct>getLookup(matchingModeEnum_CreatedBy);
	   						   
		   	   	   globalMap.put("tHash_Lookup_CreatedBy", tHash_Lookup_CreatedBy);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_CreatedBy begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";

	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_LOAD_CaseComment_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row1Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row1Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	CreatedBy.Id = next_tHashInput_2.Id;
	CreatedBy.ExternalIdSplit__c = next_tHashInput_2.ExternalIdSplit__c;
 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_CreatedBy main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CreatedBy";

	

			//CreatedBy
			//CreatedBy


			
				if(execStat){
					runStat.updateStatOnConnection("CreatedBy"+iterateId,1, 1);
				} 
			

		


			   
			   

					CreatedByStruct CreatedBy_HashRow = new CreatedByStruct();
		   	   	   
				
				CreatedBy_HashRow.Id = CreatedBy.Id;
				
				CreatedBy_HashRow.ExternalIdSplit__c = CreatedBy.ExternalIdSplit__c;
				
			tHash_Lookup_CreatedBy.put(CreatedBy_HashRow);
			
            




 


	tos_count_tAdvancedHash_CreatedBy++;

/**
 * [tAdvancedHash_CreatedBy main ] stop
 */
	
	/**
	 * [tAdvancedHash_CreatedBy process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CreatedBy";

	

 



/**
 * [tAdvancedHash_CreatedBy process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_CreatedBy process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CreatedBy";

	

 



/**
 * [tAdvancedHash_CreatedBy process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_LOAD_CaseComment_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_CreatedBy end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CreatedBy";

	

tHash_Lookup_CreatedBy.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("CreatedBy"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_CreatedBy", true);
end_Hash.put("tAdvancedHash_CreatedBy", System.currentTimeMillis());




/**
 * [tAdvancedHash_CreatedBy end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_CreatedBy finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CreatedBy";

	

 



/**
 * [tAdvancedHash_CreatedBy finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ModifiedByStruct implements routines.system.IPersistableComparableLookupRow<ModifiedByStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String ExternalIdSplit__c;

				public String getExternalIdSplit__c () {
					return this.ExternalIdSplit__c;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ExternalIdSplit__c == null) ? 0 : this.ExternalIdSplit__c.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ModifiedByStruct other = (ModifiedByStruct) obj;
		
						if (this.ExternalIdSplit__c == null) {
							if (other.ExternalIdSplit__c != null)
								return false;
						
						} else if (!this.ExternalIdSplit__c.equals(other.ExternalIdSplit__c))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ModifiedByStruct other) {

		other.Id = this.Id;
	            other.ExternalIdSplit__c = this.ExternalIdSplit__c;
	            
	}

	public void copyKeysDataTo(ModifiedByStruct other) {

		other.ExternalIdSplit__c = this.ExternalIdSplit__c;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.ExternalIdSplit__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ExternalIdSplit__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",ExternalIdSplit__c="+ExternalIdSplit__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ModifiedByStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ExternalIdSplit__c, other.ExternalIdSplit__c);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ModifiedByStruct ModifiedBy = new ModifiedByStruct();




	
	/**
	 * [tAdvancedHash_ModifiedBy begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ModifiedBy", false);
		start_Hash.put("tAdvancedHash_ModifiedBy", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ModifiedBy";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ModifiedBy" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ModifiedBy = 0;
		

			   		// connection name:ModifiedBy
			   		// source node:tHashInput_3 - inputs:(after_tSalesforceInput_3) outputs:(ModifiedBy,ModifiedBy) | target node:tAdvancedHash_ModifiedBy - inputs:(ModifiedBy) outputs:()
			   		// linked node: tMap_1 - inputs:(row3,CreatedBy,ModifiedBy,Case) outputs:(CaseComment)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ModifiedBy = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ModifiedByStruct> tHash_Lookup_ModifiedBy =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ModifiedByStruct>getLookup(matchingModeEnum_ModifiedBy);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ModifiedBy", tHash_Lookup_ModifiedBy);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ModifiedBy begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";

	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_LOAD_CaseComment_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row1Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row1Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	ModifiedBy.Id = next_tHashInput_3.Id;
	ModifiedBy.ExternalIdSplit__c = next_tHashInput_3.ExternalIdSplit__c;
 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_ModifiedBy main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ModifiedBy";

	

			//ModifiedBy
			//ModifiedBy


			
				if(execStat){
					runStat.updateStatOnConnection("ModifiedBy"+iterateId,1, 1);
				} 
			

		


			   
			   

					ModifiedByStruct ModifiedBy_HashRow = new ModifiedByStruct();
		   	   	   
				
				ModifiedBy_HashRow.Id = ModifiedBy.Id;
				
				ModifiedBy_HashRow.ExternalIdSplit__c = ModifiedBy.ExternalIdSplit__c;
				
			tHash_Lookup_ModifiedBy.put(ModifiedBy_HashRow);
			
            




 


	tos_count_tAdvancedHash_ModifiedBy++;

/**
 * [tAdvancedHash_ModifiedBy main ] stop
 */
	
	/**
	 * [tAdvancedHash_ModifiedBy process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ModifiedBy";

	

 



/**
 * [tAdvancedHash_ModifiedBy process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_ModifiedBy process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ModifiedBy";

	

 



/**
 * [tAdvancedHash_ModifiedBy process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_LOAD_CaseComment_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ModifiedBy end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ModifiedBy";

	

tHash_Lookup_ModifiedBy.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ModifiedBy"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ModifiedBy", true);
end_Hash.put("tAdvancedHash_ModifiedBy", System.currentTimeMillis());




/**
 * [tAdvancedHash_ModifiedBy end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ModifiedBy finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ModifiedBy";

	

 



/**
 * [tAdvancedHash_ModifiedBy finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class CaseStruct implements routines.system.IPersistableComparableLookupRow<CaseStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String ExternalIdSplit__c;

				public String getExternalIdSplit__c () {
					return this.ExternalIdSplit__c;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ExternalIdSplit__c == null) ? 0 : this.ExternalIdSplit__c.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CaseStruct other = (CaseStruct) obj;
		
						if (this.ExternalIdSplit__c == null) {
							if (other.ExternalIdSplit__c != null)
								return false;
						
						} else if (!this.ExternalIdSplit__c.equals(other.ExternalIdSplit__c))
						
							return false;
					

		return true;
    }

	public void copyDataTo(CaseStruct other) {

		other.Id = this.Id;
	            other.ExternalIdSplit__c = this.ExternalIdSplit__c;
	            
	}

	public void copyKeysDataTo(CaseStruct other) {

		other.ExternalIdSplit__c = this.ExternalIdSplit__c;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.ExternalIdSplit__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ExternalIdSplit__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",ExternalIdSplit__c="+ExternalIdSplit__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CaseStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ExternalIdSplit__c, other.ExternalIdSplit__c);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		CaseStruct Case = new CaseStruct();




	
	/**
	 * [tAdvancedHash_Case begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Case", false);
		start_Hash.put("tAdvancedHash_Case", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Case";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Case" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_Case = 0;
		

			   		// connection name:Case
			   		// source node:tHashInput_1 - inputs:(after_tSalesforceInput_3) outputs:(Case,Case) | target node:tAdvancedHash_Case - inputs:(Case) outputs:()
			   		// linked node: tMap_1 - inputs:(row3,CreatedBy,ModifiedBy,Case) outputs:(CaseComment)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Case = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CaseStruct> tHash_Lookup_Case =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<CaseStruct>getLookup(matchingModeEnum_Case);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Case", tHash_Lookup_Case);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Case begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";

	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_LOAD_CaseComment_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row2Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	Case.Id = next_tHashInput_1.Id;
	Case.ExternalIdSplit__c = next_tHashInput_1.ExternalIdSplit__c;
 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Case main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Case";

	

			//Case
			//Case


			
				if(execStat){
					runStat.updateStatOnConnection("Case"+iterateId,1, 1);
				} 
			

		


			   
			   

					CaseStruct Case_HashRow = new CaseStruct();
		   	   	   
				
				Case_HashRow.Id = Case.Id;
				
				Case_HashRow.ExternalIdSplit__c = Case.ExternalIdSplit__c;
				
			tHash_Lookup_Case.put(Case_HashRow);
			
            




 


	tos_count_tAdvancedHash_Case++;

/**
 * [tAdvancedHash_Case main ] stop
 */
	
	/**
	 * [tAdvancedHash_Case process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Case";

	

 



/**
 * [tAdvancedHash_Case process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Case process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Case";

	

 



/**
 * [tAdvancedHash_Case process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_LOAD_CaseComment_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Case end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Case";

	

tHash_Lookup_Case.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Case"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_Case", true);
end_Hash.put("tAdvancedHash_Case", System.currentTimeMillis());




/**
 * [tAdvancedHash_Case end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Case finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Case";

	

 



/**
 * [tAdvancedHash_Case finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class errorStruct implements routines.system.IPersistableRow<errorStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.project = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",project="+project);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(errorStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class in_logStruct implements routines.system.IPersistableRow<in_logStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_LOAD_CaseComment.length == 0) {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_LOAD_CaseComment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_LOAD_CaseComment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_LOAD_CaseComment) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(in_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		in_logStruct in_log = new in_logStruct();
errorStruct error = new errorStruct();





	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("error" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(context.Path_DI+jobName+"/Log"+TalendDate.getDate("YYYY-MM-DD")+".log")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        if(fileToDelete_tFileOutputDelimited_3.exists()) {
                            fileToDelete_tFileOutputDelimited_3.delete();
                        }
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("in_log" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
errorStruct error_tmp = new errorStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		in_log.type = lcm.getType();
		in_log.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		in_log.priority = lcm.getPriority();
		in_log.message = lcm.getMessage();
		in_log.code = lcm.getCode();
		
		in_log.moment = java.util.Calendar.getInstance().getTime();
	
    	in_log.pid = pid;
		in_log.root_pid = rootPid;
		in_log.father_pid = fatherPid;
	
    	in_log.project = projectName;
    	in_log.job = jobName;
    	in_log.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//in_log
			//in_log


			
				if(execStat){
					runStat.updateStatOnConnection("in_log"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

error = null;


// # Output table : 'error'
error_tmp.moment = in_log.moment ;
error_tmp.project = in_log.project  ;
error_tmp.origin = in_log.origin ;
error_tmp.message = in_log.message ;
error_tmp.code = in_log.code ;
error = error_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "error"
if(error != null) { 



	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

			//error
			//error


			
				if(execStat){
					runStat.updateStatOnConnection("error"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(error.moment != null) {
                        sb_tFileOutputDelimited_3.append(
                            FormatterUtils.format_Date(error.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(error.project != null) {
                        sb_tFileOutputDelimited_3.append(
                            error.project
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(error.origin != null) {
                        sb_tFileOutputDelimited_3.append(
                            error.origin
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(error.message != null) {
                        sb_tFileOutputDelimited_3.append(
                            error.message
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(error.code != null) {
                        sb_tFileOutputDelimited_3.append(
                            error.code
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */

} // End of branch "error"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("in_log"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("error"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tWarn_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Fin execution"+jobName,"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Fin execution"+jobName, 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Fin execution"+jobName); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 42);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
    	public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
        }

    	public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
        }
    };
    
    private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";
    
    {
    	globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
    }

    public static void main(String[] args){
        final LOAD_CaseComment LOAD_CaseCommentClass = new LOAD_CaseComment();

        int exitCode = LOAD_CaseCommentClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = LOAD_CaseComment.class.getClassLoader().getResourceAsStream("local_project/load_casecomment_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = LOAD_CaseComment.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("Separateur", "id_String");
				
                context.Separateur=(String) context.getProperty("Separateur");
				    context.setContextType("FilePath", "id_String");
				
                context.FilePath=(String) context.getProperty("FilePath");
				    context.setContextType("CIBLE_UserId", "id_String");
				
                context.CIBLE_UserId=(String) context.getProperty("CIBLE_UserId");
				    context.setContextType("CIBLE_SecuK", "id_Password");
				
            		String pwd_CIBLE_SecuK_value = context.getProperty("CIBLE_SecuK");
            		context.CIBLE_SecuK = null;
            		if(pwd_CIBLE_SecuK_value!=null) {
            			if(context_param.containsKey("CIBLE_SecuK")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.CIBLE_SecuK = pwd_CIBLE_SecuK_value;
            			} else if (!pwd_CIBLE_SecuK_value.isEmpty()) {
            				try {
            					context.CIBLE_SecuK = routines.system.PasswordEncryptUtil.decryptPassword(pwd_CIBLE_SecuK_value);
            					context.put("CIBLE_SecuK",context.CIBLE_SecuK);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("CIBLE_PassW", "id_Password");
				
            		String pwd_CIBLE_PassW_value = context.getProperty("CIBLE_PassW");
            		context.CIBLE_PassW = null;
            		if(pwd_CIBLE_PassW_value!=null) {
            			if(context_param.containsKey("CIBLE_PassW")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.CIBLE_PassW = pwd_CIBLE_PassW_value;
            			} else if (!pwd_CIBLE_PassW_value.isEmpty()) {
            				try {
            					context.CIBLE_PassW = routines.system.PasswordEncryptUtil.decryptPassword(pwd_CIBLE_PassW_value);
            					context.put("CIBLE_PassW",context.CIBLE_PassW);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("CIBLE_Endpt", "id_String");
				
                context.CIBLE_Endpt=(String) context.getProperty("CIBLE_Endpt");
				    context.setContextType("SOURCE_UserId", "id_String");
				
                context.SOURCE_UserId=(String) context.getProperty("SOURCE_UserId");
				    context.setContextType("SOURCE_SecuK", "id_Password");
				
            		String pwd_SOURCE_SecuK_value = context.getProperty("SOURCE_SecuK");
            		context.SOURCE_SecuK = null;
            		if(pwd_SOURCE_SecuK_value!=null) {
            			if(context_param.containsKey("SOURCE_SecuK")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.SOURCE_SecuK = pwd_SOURCE_SecuK_value;
            			} else if (!pwd_SOURCE_SecuK_value.isEmpty()) {
            				try {
            					context.SOURCE_SecuK = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SOURCE_SecuK_value);
            					context.put("SOURCE_SecuK",context.SOURCE_SecuK);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("SOURCE_Endpt", "id_String");
				
                context.SOURCE_Endpt=(String) context.getProperty("SOURCE_Endpt");
				    context.setContextType("SOURCE_PassW", "id_Password");
				
            		String pwd_SOURCE_PassW_value = context.getProperty("SOURCE_PassW");
            		context.SOURCE_PassW = null;
            		if(pwd_SOURCE_PassW_value!=null) {
            			if(context_param.containsKey("SOURCE_PassW")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.SOURCE_PassW = pwd_SOURCE_PassW_value;
            			} else if (!pwd_SOURCE_PassW_value.isEmpty()) {
            				try {
            					context.SOURCE_PassW = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SOURCE_PassW_value);
            					context.put("SOURCE_PassW",context.SOURCE_PassW);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Path_DI", "id_String");
				
                context.Path_DI=(String) context.getProperty("Path_DI");
				    context.setContextType("ProjetFolder", "id_String");
				
                context.ProjetFolder=(String) context.getProperty("ProjetFolder");
				    context.setContextType("OutFileFolder", "id_String");
				
                context.OutFileFolder=(String) context.getProperty("OutFileFolder");
				    context.setContextType("Success", "id_String");
				
                context.Success=(String) context.getProperty("Success");
				    context.setContextType("Error", "id_String");
				
                context.Error=(String) context.getProperty("Error");
				    context.setContextType("Output", "id_String");
				
                context.Output=(String) context.getProperty("Output");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("Separateur")) {
                context.Separateur = (String) parentContextMap.get("Separateur");
            }if (parentContextMap.containsKey("FilePath")) {
                context.FilePath = (String) parentContextMap.get("FilePath");
            }if (parentContextMap.containsKey("CIBLE_UserId")) {
                context.CIBLE_UserId = (String) parentContextMap.get("CIBLE_UserId");
            }if (parentContextMap.containsKey("CIBLE_SecuK")) {
                context.CIBLE_SecuK = (java.lang.String) parentContextMap.get("CIBLE_SecuK");
            }if (parentContextMap.containsKey("CIBLE_PassW")) {
                context.CIBLE_PassW = (java.lang.String) parentContextMap.get("CIBLE_PassW");
            }if (parentContextMap.containsKey("CIBLE_Endpt")) {
                context.CIBLE_Endpt = (String) parentContextMap.get("CIBLE_Endpt");
            }if (parentContextMap.containsKey("SOURCE_UserId")) {
                context.SOURCE_UserId = (String) parentContextMap.get("SOURCE_UserId");
            }if (parentContextMap.containsKey("SOURCE_SecuK")) {
                context.SOURCE_SecuK = (java.lang.String) parentContextMap.get("SOURCE_SecuK");
            }if (parentContextMap.containsKey("SOURCE_Endpt")) {
                context.SOURCE_Endpt = (String) parentContextMap.get("SOURCE_Endpt");
            }if (parentContextMap.containsKey("SOURCE_PassW")) {
                context.SOURCE_PassW = (java.lang.String) parentContextMap.get("SOURCE_PassW");
            }if (parentContextMap.containsKey("Path_DI")) {
                context.Path_DI = (String) parentContextMap.get("Path_DI");
            }if (parentContextMap.containsKey("ProjetFolder")) {
                context.ProjetFolder = (String) parentContextMap.get("ProjetFolder");
            }if (parentContextMap.containsKey("OutFileFolder")) {
                context.OutFileFolder = (String) parentContextMap.get("OutFileFolder");
            }if (parentContextMap.containsKey("Success")) {
                context.Success = (String) parentContextMap.get("Success");
            }if (parentContextMap.containsKey("Error")) {
                context.Error = (String) parentContextMap.get("Error");
            }if (parentContextMap.containsKey("Output")) {
                context.Output = (String) parentContextMap.get("Output");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("CIBLE_SecuK");
			parametersToEncrypt.add("CIBLE_PassW");
			parametersToEncrypt.add("SOURCE_SecuK");
			parametersToEncrypt.add("SOURCE_PassW");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();



try {
errorCode = null;Implicit_Context_RegexProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_Implicit_Context_Regex) {
globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", -1);

e_Implicit_Context_Regex.printStackTrace();

}

this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tSalesforceInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tSalesforceInput_2) {
globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", -1);

e_tSalesforceInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : LOAD_CaseComment");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();





            connections.put("conn_tSalesforceConnection_1", globalMap.get("conn_tSalesforceConnection_1"));
            connections.put("conn_tSalesforceConnection_2", globalMap.get("conn_tSalesforceConnection_2"));


        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     393337 characters generated by Talend Open Studio for Data Integration 
 *     on the 7 novembre 2019 14:04:15 CET
 ************************************************************************************************/