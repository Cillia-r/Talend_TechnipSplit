// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package technip.test_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: test Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class test implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ID != null) {

				this.setProperty("ID", ID.toString());

			}

			if (FULL_Endpt != null) {

				this.setProperty("FULL_Endpt", FULL_Endpt.toString());

			}

			if (FULL_PassW != null) {

				this.setProperty("FULL_PassW", FULL_PassW.toString());

			}

			if (FULL_SecuK != null) {

				this.setProperty("FULL_SecuK", FULL_SecuK.toString());

			}

			if (FULL_UserId != null) {

				this.setProperty("FULL_UserId", FULL_UserId.toString());

			}

			if (CIBLE_Endpt != null) {

				this.setProperty("CIBLE_Endpt", CIBLE_Endpt.toString());

			}

			if (CIBLE_PassW != null) {

				this.setProperty("CIBLE_PassW", CIBLE_PassW.toString());

			}

			if (CIBLE_SecuK != null) {

				this.setProperty("CIBLE_SecuK", CIBLE_SecuK.toString());

			}

			if (CIBLE_UserId != null) {

				this.setProperty("CIBLE_UserId", CIBLE_UserId.toString());

			}

			if (SOURCE_Endpt != null) {

				this.setProperty("SOURCE_Endpt", SOURCE_Endpt.toString());

			}

			if (SOURCE_PassW != null) {

				this.setProperty("SOURCE_PassW", SOURCE_PassW.toString());

			}

			if (SOURCE_SecuK != null) {

				this.setProperty("SOURCE_SecuK", SOURCE_SecuK.toString());

			}

			if (SOURCE_UserId != null) {

				this.setProperty("SOURCE_UserId", SOURCE_UserId.toString());

			}

			if (offset != null) {

				this.setProperty("offset", offset.toString());

			}

			if (idcont != null) {

				this.setProperty("idcont", idcont.toString());

			}

			if (identif != null) {

				this.setProperty("identif", identif.toString());

			}

			if (somme != null) {

				this.setProperty("somme", somme.toString());

			}

		}

		public String ID;

		public String getID() {
			return this.ID;
		}

		public String FULL_Endpt;

		public String getFULL_Endpt() {
			return this.FULL_Endpt;
		}

		public java.lang.String FULL_PassW;

		public java.lang.String getFULL_PassW() {
			return this.FULL_PassW;
		}

		public java.lang.String FULL_SecuK;

		public java.lang.String getFULL_SecuK() {
			return this.FULL_SecuK;
		}

		public String FULL_UserId;

		public String getFULL_UserId() {
			return this.FULL_UserId;
		}

		public String CIBLE_Endpt;

		public String getCIBLE_Endpt() {
			return this.CIBLE_Endpt;
		}

		public java.lang.String CIBLE_PassW;

		public java.lang.String getCIBLE_PassW() {
			return this.CIBLE_PassW;
		}

		public java.lang.String CIBLE_SecuK;

		public java.lang.String getCIBLE_SecuK() {
			return this.CIBLE_SecuK;
		}

		public String CIBLE_UserId;

		public String getCIBLE_UserId() {
			return this.CIBLE_UserId;
		}

		public String SOURCE_Endpt;

		public String getSOURCE_Endpt() {
			return this.SOURCE_Endpt;
		}

		public java.lang.String SOURCE_PassW;

		public java.lang.String getSOURCE_PassW() {
			return this.SOURCE_PassW;
		}

		public java.lang.String SOURCE_SecuK;

		public java.lang.String getSOURCE_SecuK() {
			return this.SOURCE_SecuK;
		}

		public String SOURCE_UserId;

		public String getSOURCE_UserId() {
			return this.SOURCE_UserId;
		}

		public Integer offset;

		public Integer getOffset() {
			return this.offset;
		}

		public String idcont;

		public String getIdcont() {
			return this.idcont;
		}

		public Integer identif;

		public Integer getIdentif() {
			return this.identif;
		}

		public Integer somme;

		public Integer getSomme() {
			return this.somme;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "test";
	private final String projectName = "TECHNIP";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					test.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(test.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void Implicit_Context_Regex_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		Implicit_Context_Context_error(exception, errorComponent, globalMap);

	}

	public void Implicit_Context_Context_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		Implicit_Context_Regex_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFixedFlowInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputJSON_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWriteJSONField_1_Out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tWriteJSONField_1_In_error(exception, errorComponent, globalMap);

	}

	public void tWriteJSONField_1_In_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void Implicit_Context_Regex_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWriteJSONField_1_In_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row_Implicit_Context_RegexStruct implements
			routines.system.IPersistableRow<row_Implicit_Context_RegexStruct> {
		final static byte[] commonByteArrayLock_TECHNIP_test = new byte[0];
		static byte[] commonByteArray_TECHNIP_test = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TECHNIP_test.length) {
					if (length < 1024
							&& commonByteArray_TECHNIP_test.length == 0) {
						commonByteArray_TECHNIP_test = new byte[1024];
					} else {
						commonByteArray_TECHNIP_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TECHNIP_test, 0, length);
				strReturn = new String(commonByteArray_TECHNIP_test, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TECHNIP_test) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_Implicit_Context_RegexStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void Implicit_Context_RegexProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_Implicit_Context_RegexStruct row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();

				/**
				 * [Implicit_Context_Context begin ] start
				 */

				ok_Hash.put("Implicit_Context_Context", false);
				start_Hash.put("Implicit_Context_Context",
						System.currentTimeMillis());

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_Implicit_Context_Context = 0;

				java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				int nb_line_Implicit_Context_Context = 0;

				/**
				 * [Implicit_Context_Context begin ] stop
				 */

				/**
				 * [Implicit_Context_Regex begin ] start
				 */

				ok_Hash.put("Implicit_Context_Regex", false);
				start_Hash.put("Implicit_Context_Regex",
						System.currentTimeMillis());

				currentVirtualComponent = "Implicit_Context_Regex";

				currentComponent = "Implicit_Context_Regex";

				int tos_count_Implicit_Context_Regex = 0;

				int nb_line_Implicit_Context_Regex = 0;

				int footer_Implicit_Context_Regex = 0;
				boolean removeEmptyRowImplicit_Context_Regex = true;
				Object source_Implicit_Context_Regex = /**
				 * Start field
				 * Implicit_Context_Regex:FILENAME
				 */
				"C:/Users/Cillia/Desktop/TalendWork/Commun/config.properties"/**
				 * 
				 * End field Implicit_Context_Regex:FILENAME
				 */
				;

				org.talend.fileprocess.TOSDelimitedReader inImplicit_Context_Regex = null;
				if (source_Implicit_Context_Regex instanceof String
						|| source_Implicit_Context_Regex instanceof java.io.InputStream) {
					inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/**
					 * 
					 * Start field Implicit_Context_Regex:FILENAME
					 */
					"C:/Users/Cillia/Desktop/TalendWork/Commun/config.properties"/**
					 * 
					 * End field Implicit_Context_Regex:FILENAME
					 */
					, "ISO-8859-15", "", "\n",
							removeEmptyRowImplicit_Context_Regex);
				} else {
					throw new java.lang.Exception(
							"The source data should be specified as File Path or InputStream or java.io.Reader!");
				}
				String strImplicit_Context_Regex;
				int totalLineImplicit_Context_Regex = 0, currentLineImplicit_Context_Regex = 0, beginLineImplicit_Context_Regex = 0, lastLineImplicit_Context_Regex = -1, validRowCountImplicit_Context_Regex = 0;
				int limitImplicit_Context_Regex = -1;

				int headerImplicit_Context_Regex = 0;
				if (headerImplicit_Context_Regex > 0) {
					beginLineImplicit_Context_Regex = headerImplicit_Context_Regex + 1;
				}

				if (footer_Implicit_Context_Regex > 0) {
					while (inImplicit_Context_Regex.readRecord()) {
						strImplicit_Context_Regex = inImplicit_Context_Regex
								.getRowRecord();
						totalLineImplicit_Context_Regex++;
					}
					int lastLineTempImplicit_Context_Regex = totalLineImplicit_Context_Regex
							- footer_Implicit_Context_Regex < 0 ? 0
							: totalLineImplicit_Context_Regex
									- footer_Implicit_Context_Regex;
					if (lastLineImplicit_Context_Regex > 0) {
						lastLineImplicit_Context_Regex = lastLineImplicit_Context_Regex < lastLineTempImplicit_Context_Regex ? lastLineImplicit_Context_Regex
								: lastLineTempImplicit_Context_Regex;
					} else {
						lastLineImplicit_Context_Regex = lastLineTempImplicit_Context_Regex;
					}
					inImplicit_Context_Regex.close();
					inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/**
					 * 
					 * Start field Implicit_Context_Regex:FILENAME
					 */
					"C:/Users/Cillia/Desktop/TalendWork/Commun/config.properties"/**
					 * 
					 * End field Implicit_Context_Regex:FILENAME
					 */
					, "ISO-8859-15", "", "\n",
							removeEmptyRowImplicit_Context_Regex);
				}
				java.util.StringTokenizer strTokenImplicit_Context_Regex;
				java.util.regex.Pattern patternImplicit_Context_Regex = java.util.regex.Pattern
						.compile("^([^" + "==" + "]*)" + "==" + "(.*)$");
				java.util.regex.Matcher matcherImplicit_Context_Regex = null;

				while (inImplicit_Context_Regex.readRecord()) {
					strImplicit_Context_Regex = inImplicit_Context_Regex
							.getRowRecord();

					currentLineImplicit_Context_Regex++;
					if (currentLineImplicit_Context_Regex < beginLineImplicit_Context_Regex) {
						continue;
					}
					if (lastLineImplicit_Context_Regex > -1
							&& currentLineImplicit_Context_Regex > lastLineImplicit_Context_Regex) {
						break;
					}
					if (removeEmptyRowImplicit_Context_Regex
							&& ("").equals(strImplicit_Context_Regex)) {
						continue;
					}
					if (limitImplicit_Context_Regex != -1
							&& validRowCountImplicit_Context_Regex >= limitImplicit_Context_Regex) {
						break;
					}

					matcherImplicit_Context_Regex = patternImplicit_Context_Regex
							.matcher(strImplicit_Context_Regex);
					int groupCountImplicit_Context_Regex = 0;
					boolean isMatchImplicit_Context_Regex = matcherImplicit_Context_Regex
							.find();
					if (isMatchImplicit_Context_Regex) {
						groupCountImplicit_Context_Regex = matcherImplicit_Context_Regex
								.groupCount();
					}
					row_Implicit_Context_Regex = null;

					boolean lineIsEmptyImplicit_Context_Regex = strImplicit_Context_Regex
							.length() == 0;

					String[] valueImplicit_Context_Regex = new String[2];
					String frontCharImplicit_Context_Regex, behindCharImplicit_Context_Regex;
					for (int i = 0; i < 2; i++) {
						valueImplicit_Context_Regex[i] = "";
						if (lineIsEmptyImplicit_Context_Regex) {
							continue;
						}
						if (i < groupCountImplicit_Context_Regex) {
							valueImplicit_Context_Regex[i] = matcherImplicit_Context_Regex
									.group(i + 1);
						}
					}
					validRowCountImplicit_Context_Regex++;

					boolean whetherReject_Implicit_Context_Regex = false;
					row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();
					try {
						if (!isMatchImplicit_Context_Regex) {// line data not
																// matched with
																// given regex
																// parameter
							throw new java.lang.Exception(
									"Line doesn't match: "
											+ strImplicit_Context_Regex);
						}

						if (valueImplicit_Context_Regex[0] != null
								&& valueImplicit_Context_Regex[0].length() > 0) {
							row_Implicit_Context_Regex.key = valueImplicit_Context_Regex[0];
						} else {
							row_Implicit_Context_Regex.key = "";
						}

						if (valueImplicit_Context_Regex[1] != null
								&& valueImplicit_Context_Regex[1].length() > 0) {
							row_Implicit_Context_Regex.value = valueImplicit_Context_Regex[1];
						} else {
							row_Implicit_Context_Regex.value = "";
						}

					} catch (java.lang.Exception e) {
						whetherReject_Implicit_Context_Regex = true;
						if (isMatchImplicit_Context_Regex) {
							System.err.println(e.getMessage());
						}
						row_Implicit_Context_Regex = null;
					}

					nb_line_Implicit_Context_Regex++;

					/**
					 * [Implicit_Context_Regex begin ] stop
					 */

					/**
					 * [Implicit_Context_Regex main ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

					tos_count_Implicit_Context_Regex++;

					/**
					 * [Implicit_Context_Regex main ] stop
					 */

					/**
					 * [Implicit_Context_Regex process_data_begin ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

					/**
					 * [Implicit_Context_Regex process_data_begin ] stop
					 */
					// Start of branch "row_Implicit_Context_Regex"
					if (row_Implicit_Context_Regex != null) {

						/**
						 * [Implicit_Context_Context main ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						// Main
						// row_Implicit_Context_Regex

						if (execStat) {
							runStat.updateStatOnConnection("Main" + iterateId,
									1, 1);
						}

						// ////////////////////////
						String tmp_key_Implicit_Context_Context = null;
						String key_Implicit_Context_Context = null;
						if (row_Implicit_Context_Regex.key != null) {
							tmp_key_Implicit_Context_Context = row_Implicit_Context_Regex.key
									.trim();
							if ((tmp_key_Implicit_Context_Context
									.startsWith("#") || tmp_key_Implicit_Context_Context
									.startsWith("!"))) {
								tmp_key_Implicit_Context_Context = null;
							} else {
								row_Implicit_Context_Regex.key = tmp_key_Implicit_Context_Context;
							}
						}
						if (row_Implicit_Context_Regex.key != null) {
							key_Implicit_Context_Context = row_Implicit_Context_Regex.key;
						}
						String value_Implicit_Context_Context = null;
						if (row_Implicit_Context_Regex.value != null) {
							value_Implicit_Context_Context = row_Implicit_Context_Regex.value;
						}

						String currentValue_Implicit_Context_Context = value_Implicit_Context_Context;

						if ((key_Implicit_Context_Context != null)
								&& ("FULL_PassW"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");
						if ((key_Implicit_Context_Context != null)
								&& ("FULL_SecuK"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");
						if ((key_Implicit_Context_Context != null)
								&& ("CIBLE_PassW"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");
						if ((key_Implicit_Context_Context != null)
								&& ("CIBLE_SecuK"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");
						if ((key_Implicit_Context_Context != null)
								&& ("SOURCE_PassW"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");
						if ((key_Implicit_Context_Context != null)
								&& ("SOURCE_SecuK"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");

						if (tmp_key_Implicit_Context_Context != null) {
							try {
								if (key_Implicit_Context_Context != null
										&& "ID".equals(key_Implicit_Context_Context)) {
									context.ID = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "FULL_Endpt"
												.equals(key_Implicit_Context_Context)) {
									context.FULL_Endpt = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "FULL_PassW"
												.equals(key_Implicit_Context_Context)) {
									context.FULL_PassW = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "FULL_SecuK"
												.equals(key_Implicit_Context_Context)) {
									context.FULL_SecuK = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "FULL_UserId"
												.equals(key_Implicit_Context_Context)) {
									context.FULL_UserId = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "CIBLE_Endpt"
												.equals(key_Implicit_Context_Context)) {
									context.CIBLE_Endpt = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "CIBLE_PassW"
												.equals(key_Implicit_Context_Context)) {
									context.CIBLE_PassW = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "CIBLE_SecuK"
												.equals(key_Implicit_Context_Context)) {
									context.CIBLE_SecuK = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "CIBLE_UserId"
												.equals(key_Implicit_Context_Context)) {
									context.CIBLE_UserId = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "SOURCE_Endpt"
												.equals(key_Implicit_Context_Context)) {
									context.SOURCE_Endpt = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "SOURCE_PassW"
												.equals(key_Implicit_Context_Context)) {
									context.SOURCE_PassW = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "SOURCE_SecuK"
												.equals(key_Implicit_Context_Context)) {
									context.SOURCE_SecuK = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "SOURCE_UserId"
												.equals(key_Implicit_Context_Context)) {
									context.SOURCE_UserId = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "offset"
												.equals(key_Implicit_Context_Context)) {

									context.offset = Integer
											.parseInt(value_Implicit_Context_Context);

								}

								if (key_Implicit_Context_Context != null
										&& "idcont"
												.equals(key_Implicit_Context_Context)) {
									context.idcont = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "identif"
												.equals(key_Implicit_Context_Context)) {

									context.identif = Integer
											.parseInt(value_Implicit_Context_Context);

								}

								if (key_Implicit_Context_Context != null
										&& "somme"
												.equals(key_Implicit_Context_Context)) {

									context.somme = Integer
											.parseInt(value_Implicit_Context_Context);

								}

								if (context
										.getProperty(key_Implicit_Context_Context) != null) {
									assignList_Implicit_Context_Context
											.add(key_Implicit_Context_Context);
								} else {
									newPropertyList_Implicit_Context_Context
											.add(key_Implicit_Context_Context);
								}
								if (value_Implicit_Context_Context == null) {
									context.setProperty(
											key_Implicit_Context_Context, "");
								} else {
									context.setProperty(
											key_Implicit_Context_Context,
											value_Implicit_Context_Context);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_Implicit_Context_Context
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_Implicit_Context_Context++;
						}
						// ////////////////////////

						tos_count_Implicit_Context_Context++;

						/**
						 * [Implicit_Context_Context main ] stop
						 */

						/**
						 * [Implicit_Context_Context process_data_begin ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						/**
						 * [Implicit_Context_Context process_data_begin ] stop
						 */

						/**
						 * [Implicit_Context_Context process_data_end ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						/**
						 * [Implicit_Context_Context process_data_end ] stop
						 */

					} // End of branch "row_Implicit_Context_Regex"

					/**
					 * [Implicit_Context_Regex process_data_end ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

					/**
					 * [Implicit_Context_Regex process_data_end ] stop
					 */

					/**
					 * [Implicit_Context_Regex end ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

				}
				if (!(source_Implicit_Context_Regex instanceof java.io.InputStream)) {
					inImplicit_Context_Regex.close();
				}
				inImplicit_Context_Regex = null;
				globalMap.put("Implicit_Context_Regex_NB_LINE",
						nb_line_Implicit_Context_Regex);

				ok_Hash.put("Implicit_Context_Regex", true);
				end_Hash.put("Implicit_Context_Regex",
						System.currentTimeMillis());

				/**
				 * [Implicit_Context_Regex end ] stop
				 */

				/**
				 * [Implicit_Context_Context end ] start
				 */

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				java.util.Enumeration<?> enu_Implicit_Context_Context = context
						.propertyNames();
				while (enu_Implicit_Context_Context.hasMoreElements()) {
					String key_Implicit_Context_Context = (String) enu_Implicit_Context_Context
							.nextElement();
					if (!assignList_Implicit_Context_Context
							.contains(key_Implicit_Context_Context)
							&& !newPropertyList_Implicit_Context_Context
									.contains(key_Implicit_Context_Context)) {
						noAssignList_Implicit_Context_Context
								.add(key_Implicit_Context_Context);
					}
				}

				String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context
						.toString();
				String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context
						.substring(1, newPropertyStr_Implicit_Context_Context
								.length() - 1);

				String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context
						.toString();
				String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context
						.substring(
								1,
								noAssignStr_Implicit_Context_Context.length() - 1);

				globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT",
						newProperty_Implicit_Context_Context);
				globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED",
						noAssign_Implicit_Context_Context);

				globalMap.put("Implicit_Context_Context_NB_LINE",
						nb_line_Implicit_Context_Context);

				List<String> parametersToEncrypt_Implicit_Context_Context = new java.util.ArrayList<String>();

				parametersToEncrypt_Implicit_Context_Context.add("FULL_PassW");

				parametersToEncrypt_Implicit_Context_Context.add("FULL_SecuK");

				parametersToEncrypt_Implicit_Context_Context.add("CIBLE_PassW");

				parametersToEncrypt_Implicit_Context_Context.add("CIBLE_SecuK");

				parametersToEncrypt_Implicit_Context_Context
						.add("SOURCE_PassW");

				parametersToEncrypt_Implicit_Context_Context
						.add("SOURCE_SecuK");

				resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "",
						Thread.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_Implicit_Context_Context));

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("Implicit_Context_Context", true);
				end_Hash.put("Implicit_Context_Context",
						System.currentTimeMillis());

				/**
				 * [Implicit_Context_Context end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [Implicit_Context_Regex finally ] start
				 */

				currentVirtualComponent = "Implicit_Context_Regex";

				currentComponent = "Implicit_Context_Regex";

				/**
				 * [Implicit_Context_Regex finally ] stop
				 */

				/**
				 * [Implicit_Context_Context finally ] start
				 */

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				/**
				 * [Implicit_Context_Context finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_TECHNIP_test = new byte[0];
		static byte[] commonByteArray_TECHNIP_test = new byte[0];

		public String firstname;

		public String getFirstname() {
			return this.firstname;
		}

		public String lastname;

		public String getLastname() {
			return this.lastname;
		}

		public String dept;

		public String getDept() {
			return this.dept;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TECHNIP_test.length) {
					if (length < 1024
							&& commonByteArray_TECHNIP_test.length == 0) {
						commonByteArray_TECHNIP_test = new byte[1024];
					} else {
						commonByteArray_TECHNIP_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TECHNIP_test, 0, length);
				strReturn = new String(commonByteArray_TECHNIP_test, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TECHNIP_test) {

				try {

					int length = 0;

					this.firstname = readString(dis);

					this.lastname = readString(dis);

					this.dept = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firstname, dos);

				// String

				writeString(this.lastname, dos);

				// String

				writeString(this.dept, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firstname=" + firstname);
			sb.append(",lastname=" + lastname);
			sb.append(",dept=" + dept);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				/**
				 * [tWriteJSONField_1_Out begin ] start
				 */

				ok_Hash.put("tWriteJSONField_1_Out", false);
				start_Hash.put("tWriteJSONField_1_Out",
						System.currentTimeMillis());

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_Out";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row19" + iterateId, 0,
								0);

					}
				}

				int tos_count_tWriteJSONField_1_Out = 0;

				// tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_1_Out = 0;
				boolean needRoot_tWriteJSONField_1_Out = true;

				String strCompCache_tWriteJSONField_1_Out = null;

				java.util.Queue<row20Struct> listGroupby_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<row20Struct>();

				class ThreadXMLField_tWriteJSONField_1_Out extends Thread {

					java.util.Queue<row20Struct> queue;

					java.util.List<java.util.Map<String, String>> flows;
					java.lang.Exception lastException;
					String currentComponent;

					ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q) {
						this.queue = q;
						globalMap.put("queue_tWriteJSONField_1_In", queue);
						lastException = null;
					}

					ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q,
							java.util.List<java.util.Map<String, String>> l) {
						this.queue = q;
						this.flows = l;
						lastException = null;
						globalMap.put("queue_tWriteJSONField_1_In", queue);
						globalMap.put("flows_tWriteJSONField_1_In", flows);
					}

					public java.lang.Exception getLastException() {
						return this.lastException;
					}

					public String getCurrentComponent() {
						return this.currentComponent;
					}

					@Override
					public void run() {
						try {
							tWriteJSONField_1_InProcess(globalMap);
						} catch (TalendException te) {
							this.lastException = te.getException();
							this.currentComponent = te.getCurrentComponent();
						}
					}
				}

				ThreadXMLField_tWriteJSONField_1_Out txf_tWriteJSONField_1_Out = new ThreadXMLField_tWriteJSONField_1_Out(
						listGroupby_tWriteJSONField_1_Out);

				txf_tWriteJSONField_1_Out.start();

				java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
				java.util.Map<String, String> valueMap_tWriteJSONField_1_Out = new java.util.HashMap<String, String>();
				java.util.Map<String, String> arraysValueMap_tWriteJSONField_1_Out = new java.util.HashMap<String, String>();

				class NestXMLTool_tWriteJSONField_1_Out {
					public void parseAndAdd(org.dom4j.Element nestRoot,
							String value) {
						try {
							org.dom4j.Document doc4Str = org.dom4j.DocumentHelper
									.parseText("<root>" + value + "</root>");
							nestRoot.setContent(doc4Str.getRootElement()
									.content());
						} catch (java.lang.Exception e) {
							e.printStackTrace();
							nestRoot.setText(value);
						}
					}

					public void setText(org.dom4j.Element element, String value) {
						if (value.startsWith("<![CDATA[")
								&& value.endsWith("]]>")) {
							String text = value
									.substring(9, value.length() - 3);
							element.addCDATA(text);
						} else {
							element.setText(value);
						}
					}

					public void replaceDefaultNameSpace(
							org.dom4j.Element nestRoot) {
						if (nestRoot != null) {
							for (org.dom4j.Element tmp : (java.util.List<org.dom4j.Element>) nestRoot
									.elements()) {
								if (("").equals(tmp.getQName().getNamespace()
										.getURI())
										&& ("").equals(tmp.getQName()
												.getNamespace().getPrefix())) {
									tmp.setQName(org.dom4j.DocumentHelper
											.createQName(tmp.getName(),
													nestRoot.getQName()
															.getNamespace()));
								}
								replaceDefaultNameSpace(tmp);
							}
						}
					}

					public void removeEmptyElement(org.dom4j.Element root) {
						if (root != null) {
							for (org.dom4j.Element tmp : (java.util.List<org.dom4j.Element>) root
									.elements()) {
								removeEmptyElement(tmp);
							}
							if (root.content().size() == 0
									&& root.attributes().size() == 0
									&& root.declaredNamespaces().size() == 0) {
								if (root.getParent() != null) {
									root.getParent().remove(root);
								}
							}
						}
					}

					public String objectToString(Object value) {
						if (value.getClass().isArray()) {
							StringBuilder sb = new StringBuilder();

							int length = java.lang.reflect.Array
									.getLength(value);
							for (int i = 0; i < length; i++) {
								Object obj = java.lang.reflect.Array.get(value,
										i);
								sb.append("<element>");
								sb.append(obj);
								sb.append("</element>");
							}
							return sb.toString();
						} else {
							return value.toString();
						}
					}
				}
				NestXMLTool_tWriteJSONField_1_Out nestXMLTool_tWriteJSONField_1_Out = new NestXMLTool_tWriteJSONField_1_Out();

				row19Struct rowStructOutput_tWriteJSONField_1_Out = new row19Struct();
				// sort group root element for judgement of group
				java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
				org.dom4j.Element root4Group_tWriteJSONField_1_Out = null;
				org.dom4j.Document doc_tWriteJSONField_1_Out = org.dom4j.DocumentHelper
						.createDocument();
				org.dom4j.io.OutputFormat format_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat
						.createCompactFormat();
				format_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
				format_tWriteJSONField_1_Out.setTrimText(false);
				format_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
				int[] orders_tWriteJSONField_1_Out = new int[1];

				/**
				 * [tWriteJSONField_1_Out begin ] stop
				 */

				/**
				 * [tFixedFlowInput_4 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_4", false);
				start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_4";

				int tos_count_tFixedFlowInput_4 = 0;

				StringBuilder result_tFixedFlowInput_4 = new StringBuilder();
				result_tFixedFlowInput_4
						.append("QW5kcmV3O1dhbGxhY2U7RG9jDQpKb2huO1NtaXRoO1ImRA0KQ2hyaXN0aWFuO0Rpb3I7U2FsZXM=");
				String originalFileContent_tFixedFlowInput_4 = "";
				try {
					originalFileContent_tFixedFlowInput_4 = new String(
							(new sun.misc.BASE64Decoder()).decodeBuffer(result_tFixedFlowInput_4
									.toString()), utf8Charset);
				} catch (java.lang.Exception e) {
					e.printStackTrace();
				}

				int nb_line_tFixedFlowInput_4 = 0;

				for (int i_tFixedFlowInput_4 = 0; i_tFixedFlowInput_4 < 1; i_tFixedFlowInput_4++) {

					java.io.InputStream ins_tFixedFlowInput_4 = new java.io.ByteArrayInputStream(
							originalFileContent_tFixedFlowInput_4
									.getBytes(utf8Charset));
					org.talend.fileprocess.FileInputDelimited fid_tFixedFlowInput_4 = new org.talend.fileprocess.FileInputDelimited(
							ins_tFixedFlowInput_4, utf8Charset, ";", "\n",
							true, 0, 0, -1, -1, false);

					while (fid_tFixedFlowInput_4.nextRecord()) {
						nb_line_tFixedFlowInput_4++;
						row19 = new row19Struct();

						if (0 < fid_tFixedFlowInput_4
								.getColumnsCountOfCurrentRow()) {
							String colContent = fid_tFixedFlowInput_4.get(0);
							row19.firstname = (colContent == null || colContent
									.length() == 0) ? null : colContent;
						} else {

							row19.firstname = null;

						}

						if (1 < fid_tFixedFlowInput_4
								.getColumnsCountOfCurrentRow()) {
							String colContent = fid_tFixedFlowInput_4.get(1);
							row19.lastname = (colContent == null || colContent
									.length() == 0) ? null : colContent;
						} else {

							row19.lastname = null;

						}

						if (2 < fid_tFixedFlowInput_4
								.getColumnsCountOfCurrentRow()) {
							String colContent = fid_tFixedFlowInput_4.get(2);
							row19.dept = (colContent == null || colContent
									.length() == 0) ? null : colContent;
						} else {

							row19.dept = null;

						}

						/**
						 * [tFixedFlowInput_4 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_4 main ] start
						 */

						currentComponent = "tFixedFlowInput_4";

						tos_count_tFixedFlowInput_4++;

						/**
						 * [tFixedFlowInput_4 main ] stop
						 */

						/**
						 * [tFixedFlowInput_4 process_data_begin ] start
						 */

						currentComponent = "tFixedFlowInput_4";

						/**
						 * [tFixedFlowInput_4 process_data_begin ] stop
						 */

						/**
						 * [tWriteJSONField_1_Out main ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_Out";

						// row19
						// row19

						if (execStat) {
							runStat.updateStatOnConnection("row19" + iterateId,
									1, 1);
						}

						if (txf_tWriteJSONField_1_Out.getLastException() != null) {
							currentComponent = txf_tWriteJSONField_1_Out
									.getCurrentComponent();
							throw txf_tWriteJSONField_1_Out.getLastException();
						}
						nb_line_tWriteJSONField_1_Out++;
						valueMap_tWriteJSONField_1_Out.clear();
						arraysValueMap_tWriteJSONField_1_Out.clear();
						valueMap_tWriteJSONField_1_Out.put(
								"firstname",
								(row19.firstname != null ? row19.firstname
										.toString() : null));
						arraysValueMap_tWriteJSONField_1_Out.put(
								"firstname",
								(row19.firstname != null ? row19.firstname
										.toString() : null));
						valueMap_tWriteJSONField_1_Out.put(
								"lastname",
								(row19.lastname != null ? row19.lastname
										.toString() : null));
						arraysValueMap_tWriteJSONField_1_Out.put(
								"lastname",
								(row19.lastname != null ? row19.lastname
										.toString() : null));
						valueMap_tWriteJSONField_1_Out.put("dept",
								(row19.dept != null ? row19.dept.toString()
										: null));
						arraysValueMap_tWriteJSONField_1_Out.put("dept",
								(row19.dept != null ? row19.dept.toString()
										: null));
						String strTemp_tWriteJSONField_1_Out = "";
						if (strCompCache_tWriteJSONField_1_Out == null) {
							strCompCache_tWriteJSONField_1_Out = strTemp_tWriteJSONField_1_Out;

						} else {
							nestXMLTool_tWriteJSONField_1_Out
									.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out
											.getRootElement());
							java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
							org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(
									strWriter_tWriteJSONField_1_Out,
									format_tWriteJSONField_1_Out);
							output_tWriteJSONField_1_Out
									.write(doc_tWriteJSONField_1_Out);
							output_tWriteJSONField_1_Out.close();

							row20Struct row_tWriteJSONField_1_Out = new row20Struct();

							row_tWriteJSONField_1_Out.staff = strWriter_tWriteJSONField_1_Out
									.toString();
							listGroupby_tWriteJSONField_1_Out
									.add(row_tWriteJSONField_1_Out);

							doc_tWriteJSONField_1_Out.clearContent();
							needRoot_tWriteJSONField_1_Out = true;
							for (int i_tWriteJSONField_1_Out = 0; i_tWriteJSONField_1_Out < orders_tWriteJSONField_1_Out.length; i_tWriteJSONField_1_Out++) {
								orders_tWriteJSONField_1_Out[i_tWriteJSONField_1_Out] = 0;
							}

							if (groupbyList_tWriteJSONField_1_Out != null
									&& groupbyList_tWriteJSONField_1_Out.size() >= 0) {
								groupbyList_tWriteJSONField_1_Out.clear();
							}
							strCompCache_tWriteJSONField_1_Out = strTemp_tWriteJSONField_1_Out;
						}

						org.dom4j.Element subTreeRootParent_tWriteJSONField_1_Out = null;

						// build root xml tree
						if (needRoot_tWriteJSONField_1_Out) {
							needRoot_tWriteJSONField_1_Out = false;
							org.dom4j.Element root_tWriteJSONField_1_Out = doc_tWriteJSONField_1_Out
									.addElement("staff");
							subTreeRootParent_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out;
							org.dom4j.Element root_0_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out
									.addElement("lastname");
							if (valueMap_tWriteJSONField_1_Out.get("lastname") != null) {
								nestXMLTool_tWriteJSONField_1_Out.setText(
										root_0_tWriteJSONField_1_Out,
										valueMap_tWriteJSONField_1_Out
												.get("lastname"));
							}
							org.dom4j.Element root_1_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out
									.addElement("dept");
							if (valueMap_tWriteJSONField_1_Out.get("dept") != null) {
								nestXMLTool_tWriteJSONField_1_Out.setText(
										root_1_tWriteJSONField_1_Out,
										valueMap_tWriteJSONField_1_Out
												.get("dept"));
							}
							root4Group_tWriteJSONField_1_Out = subTreeRootParent_tWriteJSONField_1_Out;
						} else {
							subTreeRootParent_tWriteJSONField_1_Out = root4Group_tWriteJSONField_1_Out;
						}
						// build group xml tree
						// build loop xml tree
						org.dom4j.Element loop_tWriteJSONField_1_Out = org.dom4j.DocumentHelper
								.createElement("firstname");
						if (orders_tWriteJSONField_1_Out[0] == 0) {
							orders_tWriteJSONField_1_Out[0] = 0;
						}
						if (1 < orders_tWriteJSONField_1_Out.length) {
							orders_tWriteJSONField_1_Out[1] = 0;
						}
						subTreeRootParent_tWriteJSONField_1_Out.elements().add(
								orders_tWriteJSONField_1_Out[0]++,
								loop_tWriteJSONField_1_Out);
						if (valueMap_tWriteJSONField_1_Out.get("firstname") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									loop_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("firstname"));
						}

						tos_count_tWriteJSONField_1_Out++;

						/**
						 * [tWriteJSONField_1_Out main ] stop
						 */

						/**
						 * [tWriteJSONField_1_Out process_data_begin ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_Out";

						/**
						 * [tWriteJSONField_1_Out process_data_begin ] stop
						 */

						/**
						 * [tWriteJSONField_1_Out process_data_end ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_Out";

						/**
						 * [tWriteJSONField_1_Out process_data_end ] stop
						 */

						/**
						 * [tFixedFlowInput_4 process_data_end ] start
						 */

						currentComponent = "tFixedFlowInput_4";

						/**
						 * [tFixedFlowInput_4 process_data_end ] stop
						 */

						/**
						 * [tFixedFlowInput_4 end ] start
						 */

						currentComponent = "tFixedFlowInput_4";

					}
					fid_tFixedFlowInput_4.close();
				}

				globalMap.put("tFixedFlowInput_4_NB_LINE",
						nb_line_tFixedFlowInput_4);

				ok_Hash.put("tFixedFlowInput_4", true);
				end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_4 end ] stop
				 */

				/**
				 * [tWriteJSONField_1_Out end ] start
				 */

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_Out";

				if (nb_line_tWriteJSONField_1_Out > 0) {
					nestXMLTool_tWriteJSONField_1_Out
							.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out
									.getRootElement());
					java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
					org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(
							strWriter_tWriteJSONField_1_Out,
							format_tWriteJSONField_1_Out);
					output_tWriteJSONField_1_Out
							.write(doc_tWriteJSONField_1_Out);
					output_tWriteJSONField_1_Out.close();
					row20Struct row_tWriteJSONField_1_Out = new row20Struct();

					row_tWriteJSONField_1_Out.staff = strWriter_tWriteJSONField_1_Out
							.toString();
					listGroupby_tWriteJSONField_1_Out
							.add(row_tWriteJSONField_1_Out);

				}
				globalMap.put("tWriteJSONField_1_Out_NB_LINE",
						nb_line_tWriteJSONField_1_Out);
				globalMap
						.put("tWriteJSONField_1_In_FINISH"
								+ (listGroupby_tWriteJSONField_1_Out == null ? ""
										: listGroupby_tWriteJSONField_1_Out
												.hashCode()), "true");

				txf_tWriteJSONField_1_Out.join();
				if (txf_tWriteJSONField_1_Out.getLastException() != null) {
					currentComponent = txf_tWriteJSONField_1_Out
							.getCurrentComponent();
					throw txf_tWriteJSONField_1_Out.getLastException();
				}

				resourceMap.put("finish_tWriteJSONField_1_Out", true);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row19" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tWriteJSONField_1_Out", true);
				end_Hash.put("tWriteJSONField_1_Out",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}

				/**
				 * [tWriteJSONField_1_Out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_4 finally ] start
				 */

				currentComponent = "tFixedFlowInput_4";

				/**
				 * [tFixedFlowInput_4 finally ] stop
				 */

				/**
				 * [tWriteJSONField_1_Out finally ] start
				 */

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_Out";

				java.util.Queue listGroupby_tWriteJSONField_1_Out = (java.util.Queue) globalMap
						.get("queue_tWriteJSONField_1_In");
				if (resourceMap.get("finish_tWriteJSONField_1_Out") == null) {
					globalMap
							.put("tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"
									+ (listGroupby_tWriteJSONField_1_Out == null ? ""
											: listGroupby_tWriteJSONField_1_Out
													.hashCode()), "true");
				}

				if (listGroupby_tWriteJSONField_1_Out != null) {
					globalMap
							.put("tWriteJSONField_1_In_FINISH"
									+ (listGroupby_tWriteJSONField_1_Out == null ? ""
											: listGroupby_tWriteJSONField_1_Out
													.hashCode()), "true");
				}

				/**
				 * [tWriteJSONField_1_Out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_TECHNIP_test = new byte[0];
		static byte[] commonByteArray_TECHNIP_test = new byte[0];

		public String firstname;

		public String getFirstname() {
			return this.firstname;
		}

		public String lastname;

		public String getLastname() {
			return this.lastname;
		}

		public String dept;

		public String getDept() {
			return this.dept;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TECHNIP_test.length) {
					if (length < 1024
							&& commonByteArray_TECHNIP_test.length == 0) {
						commonByteArray_TECHNIP_test = new byte[1024];
					} else {
						commonByteArray_TECHNIP_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TECHNIP_test, 0, length);
				strReturn = new String(commonByteArray_TECHNIP_test, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TECHNIP_test) {

				try {

					int length = 0;

					this.firstname = readString(dis);

					this.lastname = readString(dis);

					this.dept = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firstname, dos);

				// String

				writeString(this.lastname, dos);

				// String

				writeString(this.dept, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firstname=" + firstname);
			sb.append(",lastname=" + lastname);
			sb.append(",dept=" + dept);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_TECHNIP_test = new byte[0];
		static byte[] commonByteArray_TECHNIP_test = new byte[0];

		public String staff;

		public String getStaff() {
			return this.staff;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TECHNIP_test.length) {
					if (length < 1024
							&& commonByteArray_TECHNIP_test.length == 0) {
						commonByteArray_TECHNIP_test = new byte[1024];
					} else {
						commonByteArray_TECHNIP_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TECHNIP_test, 0, length);
				strReturn = new String(commonByteArray_TECHNIP_test, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TECHNIP_test) {

				try {

					int length = 0;

					this.staff = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.staff, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("staff=" + staff);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tWriteJSONField_1_InProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();
				row21Struct row21 = new row21Struct();

				/**
				 * [tFileOutputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileOutputJSON_1", false);
				start_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileOutputJSON_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row21" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputJSON_1 = 0;

				int nb_line_tFileOutputJSON_1 = 0;
				java.io.File file_tFileOutputJSON_1 = new java.io.File(
						"C:/Users/Cillia/Desktop/Nouveau dossier (2)/out.json");
				java.io.File dir_tFileOutputJSON_1 = file_tFileOutputJSON_1
						.getParentFile();
				if (dir_tFileOutputJSON_1 != null
						&& !dir_tFileOutputJSON_1.exists()) {
					dir_tFileOutputJSON_1.mkdirs();
				}
				java.io.PrintWriter outtFileOutputJSON_1 = new java.io.PrintWriter(
						new java.io.BufferedWriter(
								new java.io.FileWriter(
										"C:/Users/Cillia/Desktop/Nouveau dossier (2)/out.json")));
				outtFileOutputJSON_1.append("{\"" + "staff" + "\":[");
				boolean isFirst_tFileOutputJSON_1 = true;

				/**
				 * [tFileOutputJSON_1 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_2 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_2", false);
				start_Hash.put("tExtractJSONFields_2",
						System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row20" + iterateId, 0,
								0);

					}
				}

				int tos_count_tExtractJSONFields_2 = 0;

				int nb_line_tExtractJSONFields_2 = 0;
				String jsonStr_tExtractJSONFields_2 = "";

				class ConvertJSONString_tExtractJSONFields_2 {
					final static int Brace = 0; // {
					final static int Bracket = 1; // [
					private int barceType = -1;
					private String originalJsonString = "";
					private String originalLoopString = "";
					private String jsonString4XML = null;
					private String loopString4XML = null;
					private String additionRoot = null;

					public void barceType() {

						for (int c = 0; c < originalJsonString.length(); ++c) {
							if (originalJsonString.charAt(c) == '{') {
								barceType = Brace;
								break;
							} else if (originalJsonString.charAt(c) == '[') {
								barceType = Bracket;
								break;
							}
						}
					}

					public void setJsonString(String originalJsonString) {
						this.originalJsonString = originalJsonString;
					}

					public void setLoopString(String originalLoopString) {
						this.originalLoopString = originalLoopString;
					}

					public String getJsonString4XML() {
						return jsonString4XML;
					}

					public String getLoopString4XML() {
						if (loopString4XML.length() > 1
								&& loopString4XML.endsWith("/")) {
							loopString4XML = loopString4XML.substring(0,
									loopString4XML.length() - 1);
						}
						return loopString4XML;
					}

					public void setAdditionRoot(String additionRoot) {
						this.additionRoot = additionRoot;
					}

					public String getAdditionRoot() {
						return additionRoot;
					}

					public void generate() {
						barceType();
						jsonString4XML = originalJsonString;
						loopString4XML = originalLoopString;
						if (Brace == barceType) {
							if (isNeedAddRoot(originalJsonString)) {
								jsonString4XML = "{ \"root\": "
										+ originalJsonString + " }";
								loopString4XML = "root" + originalLoopString;
								setAdditionRoot("root");
							}
						} else if (Bracket == barceType) {
							jsonString4XML = "{ \"root\" : { \"object\": "
									+ originalJsonString + " } }";
							loopString4XML = "root/object" + originalLoopString;
							setAdditionRoot("object");
						}
					}

					public boolean isNeedAddRoot(String originalJsonString) {
						boolean isNeedAddRoot = false;
						net.sf.json.JSONObject jso = net.sf.json.JSONObject
								.fromObject(originalJsonString);
						String jsonKey = "";
						Object firstObject = null;
						if (jso.names().size() == 1) {
							jsonKey = jso.names().get(0).toString();
							firstObject = jso.get(jsonKey);
						}
						if (jso.size() > 1
								|| (firstObject != null
										&& firstObject instanceof net.sf.json.JSONArray && ((net.sf.json.JSONArray) firstObject)
										.size() > 1)) {
							isNeedAddRoot = true;
						}
						return isNeedAddRoot;
					}

				}

				ConvertJSONString_tExtractJSONFields_2 cjs_tExtractJSONFields_2 = new ConvertJSONString_tExtractJSONFields_2();

				de.odysseus.staxon.json.JsonXMLConfig config_tExtractJSONFields_2 = new de.odysseus.staxon.json.JsonXMLConfigBuilder()
						.multiplePI(false).build();
				de.odysseus.staxon.json.JsonXMLInputFactory jsonXMLInputFactory_tExtractJSONFields_2 = new de.odysseus.staxon.json.JsonXMLInputFactory(
						config_tExtractJSONFields_2);
				javax.xml.stream.XMLOutputFactory xmlOutputFactory_tExtractJSONFields_2 = javax.xml.stream.XMLOutputFactory
						.newInstance();
				boolean isGetWholeJson_tExtractJSONFields_2 = false;

				class OriginalJSONString_tExtractJSONFields_2 {
				}

				OriginalJSONString_tExtractJSONFields_2 originalJSONString_tExtractJSONFields_2 = new OriginalJSONString_tExtractJSONFields_2();

				class XML_API_tExtractJSONFields_2 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				String xmlStr_tExtractJSONFields_2 = "";

				XML_API_tExtractJSONFields_2 xml_api_tExtractJSONFields_2 = new XML_API_tExtractJSONFields_2();

				/**
				 * [tExtractJSONFields_2 begin ] stop
				 */

				/**
				 * [tWriteJSONField_1_In begin ] start
				 */

				ok_Hash.put("tWriteJSONField_1_In", false);
				start_Hash.put("tWriteJSONField_1_In",
						System.currentTimeMillis());

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_In";

				int tos_count_tWriteJSONField_1_In = 0;

				int nb_line_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer();
				xmlSerializer_tWriteJSONField_1_In.clearNamespaces();
				xmlSerializer_tWriteJSONField_1_In.setSkipNamespaces(true);
				xmlSerializer_tWriteJSONField_1_In.setForceTopLevelObject(true);

				java.util.Queue<row20Struct> queue_tWriteJSONField_1_In = (java.util.Queue<row20Struct>) globalMap
						.get("queue_tWriteJSONField_1_In");

				String readFinishMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH"
						+ (queue_tWriteJSONField_1_In == null ? ""
								: queue_tWriteJSONField_1_In.hashCode());
				String str_tWriteJSONField_1_In = null;

				while (!globalMap
						.containsKey(readFinishMarkWithPipeId_tWriteJSONField_1_In)
						|| !queue_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_tWriteJSONField_1_In.isEmpty()) {

						/**
						 * [tWriteJSONField_1_In begin ] stop
						 */

						/**
						 * [tWriteJSONField_1_In main ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_In";

						row20Struct result_tWriteJSONField_1_In = queue_tWriteJSONField_1_In
								.poll();
						str_tWriteJSONField_1_In = result_tWriteJSONField_1_In.staff;
						// Convert XML to JSON
						net.sf.json.JSON json_tWriteJSONField_1_In = xmlSerializer_tWriteJSONField_1_In
								.read(str_tWriteJSONField_1_In);
						row20.staff = json_tWriteJSONField_1_In.toString();

						nb_line_tWriteJSONField_1_In++;

						tos_count_tWriteJSONField_1_In++;

						/**
						 * [tWriteJSONField_1_In main ] stop
						 */

						/**
						 * [tWriteJSONField_1_In process_data_begin ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_In";

						/**
						 * [tWriteJSONField_1_In process_data_begin ] stop
						 */

						/**
						 * [tExtractJSONFields_2 main ] start
						 */

						currentComponent = "tExtractJSONFields_2";

						// row20
						// row20

						if (execStat) {
							runStat.updateStatOnConnection("row20" + iterateId,
									1, 1);
						}

						if (row20.staff != null) {// C_01
							jsonStr_tExtractJSONFields_2 = row20.staff
									.toString();

							row21 = null;

							org.dom4j.io.SAXReader reader_tExtractJSONFields_2 = new org.dom4j.io.SAXReader();
							org.dom4j.Document doc_tExtractJSONFields_2 = null;
							java.util.HashMap xmlNameSpaceMap_tExtractJSONFields_2 = new java.util.HashMap<String, String>();
							org.dom4j.XPath x_tExtractJSONFields_2 = null;
							java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractJSONFields_2 = null;
							boolean isStructError_tExtractJSONFields_2 = true;

							String loopQuery_tExtractJSONFields_2 = "/staff";
							String oraginalJsonStr_tExtractJSONFields_2 = jsonStr_tExtractJSONFields_2;
							cjs_tExtractJSONFields_2
									.setJsonString(jsonStr_tExtractJSONFields_2);
							cjs_tExtractJSONFields_2
									.setLoopString(loopQuery_tExtractJSONFields_2);
							java.io.ByteArrayInputStream bais_tExtractJSONFields_2 = null;
							java.io.ByteArrayOutputStream baos_tExtractJSONFields_2 = new java.io.ByteArrayOutputStream();
							try {
								cjs_tExtractJSONFields_2.generate();
								jsonStr_tExtractJSONFields_2 = cjs_tExtractJSONFields_2
										.getJsonString4XML();
								loopQuery_tExtractJSONFields_2 = cjs_tExtractJSONFields_2
										.getLoopString4XML();
								bais_tExtractJSONFields_2 = new ByteArrayInputStream(
										jsonStr_tExtractJSONFields_2
												.getBytes("UTF-8"));
								javax.xml.stream.XMLEventReader xmlEventReader_tExtractJSONFields_2 = jsonXMLInputFactory_tExtractJSONFields_2
										.createXMLEventReader(bais_tExtractJSONFields_2);
								javax.xml.stream.XMLEventWriter xmLEventWriter_tExtractJSONFields_2 = xmlOutputFactory_tExtractJSONFields_2
										.createXMLEventWriter(
												baos_tExtractJSONFields_2,
												"UTF-8");
								xmLEventWriter_tExtractJSONFields_2
										.add(xmlEventReader_tExtractJSONFields_2);
								// convert json string to xml
								xmlStr_tExtractJSONFields_2 = baos_tExtractJSONFields_2
										.toString();
								xmLEventWriter_tExtractJSONFields_2.close();
								xmlEventReader_tExtractJSONFields_2.close();

								doc_tExtractJSONFields_2 = reader_tExtractJSONFields_2
										.read(new java.io.StringReader(
												xmlStr_tExtractJSONFields_2));
								x_tExtractJSONFields_2 = doc_tExtractJSONFields_2
										.createXPath(loopQuery_tExtractJSONFields_2);
								x_tExtractJSONFields_2
										.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_2);
								nodeList_tExtractJSONFields_2 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractJSONFields_2
										.selectNodes(doc_tExtractJSONFields_2);
								isStructError_tExtractJSONFields_2 = false;

							} catch (java.lang.Exception ex_tExtractJSONFields_2) {
								System.err.println(ex_tExtractJSONFields_2
										.getMessage());
							} finally {
								baos_tExtractJSONFields_2.close();
								if (bais_tExtractJSONFields_2 != null) {
									bais_tExtractJSONFields_2.close();
								}
							}

							org.dom4j.Node node_tExtractJSONFields_2 = null;
							String str_tExtractJSONFields_2 = "";
							for (int i_tExtractJSONFields_2 = 0; isStructError_tExtractJSONFields_2
									|| (nodeList_tExtractJSONFields_2 != null && i_tExtractJSONFields_2 < nodeList_tExtractJSONFields_2
											.size()); i_tExtractJSONFields_2++) {

								if (!isStructError_tExtractJSONFields_2) {
									row21 = null;
									row21 = new row21Struct();

									org.dom4j.tree.AbstractNode temp_tExtractJSONFields_2 = nodeList_tExtractJSONFields_2
											.get(i_tExtractJSONFields_2);

									nb_line_tExtractJSONFields_2++;
									try {
										org.dom4j.XPath xTmp0_tExtractJSONFields_2 = temp_tExtractJSONFields_2
												.createXPath("firstname");
										xTmp0_tExtractJSONFields_2
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_2);
										Object obj0_tExtractJSONFields_2 = xTmp0_tExtractJSONFields_2
												.evaluate(temp_tExtractJSONFields_2);
										if (obj0_tExtractJSONFields_2 instanceof String
												|| obj0_tExtractJSONFields_2 instanceof Number) {
											node_tExtractJSONFields_2 = temp_tExtractJSONFields_2;
											str_tExtractJSONFields_2 = String
													.valueOf(obj0_tExtractJSONFields_2);
										} else {
											node_tExtractJSONFields_2 = xTmp0_tExtractJSONFields_2
													.selectSingleNode(temp_tExtractJSONFields_2);

											str_tExtractJSONFields_2 = xTmp0_tExtractJSONFields_2
													.valueOf(temp_tExtractJSONFields_2);

										}

										if (xml_api_tExtractJSONFields_2
												.isDefNull(node_tExtractJSONFields_2)) {
											row21.firstname = null;
										} else if (xml_api_tExtractJSONFields_2
												.isEmpty(node_tExtractJSONFields_2)) {
											row21.firstname = "";
										} else if (xml_api_tExtractJSONFields_2
												.isMissing(node_tExtractJSONFields_2)) {
											row21.firstname = null;
										} else {

											row21.firstname = str_tExtractJSONFields_2;

										}

										org.dom4j.XPath xTmp1_tExtractJSONFields_2 = temp_tExtractJSONFields_2
												.createXPath("lastname");
										xTmp1_tExtractJSONFields_2
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_2);
										Object obj1_tExtractJSONFields_2 = xTmp1_tExtractJSONFields_2
												.evaluate(temp_tExtractJSONFields_2);
										if (obj1_tExtractJSONFields_2 instanceof String
												|| obj1_tExtractJSONFields_2 instanceof Number) {
											node_tExtractJSONFields_2 = temp_tExtractJSONFields_2;
											str_tExtractJSONFields_2 = String
													.valueOf(obj1_tExtractJSONFields_2);
										} else {
											node_tExtractJSONFields_2 = xTmp1_tExtractJSONFields_2
													.selectSingleNode(temp_tExtractJSONFields_2);

											str_tExtractJSONFields_2 = xTmp1_tExtractJSONFields_2
													.valueOf(temp_tExtractJSONFields_2);

										}

										if (xml_api_tExtractJSONFields_2
												.isDefNull(node_tExtractJSONFields_2)) {
											row21.lastname = null;
										} else if (xml_api_tExtractJSONFields_2
												.isEmpty(node_tExtractJSONFields_2)) {
											row21.lastname = "";
										} else if (xml_api_tExtractJSONFields_2
												.isMissing(node_tExtractJSONFields_2)) {
											row21.lastname = null;
										} else {

											row21.lastname = str_tExtractJSONFields_2;

										}

										org.dom4j.XPath xTmp2_tExtractJSONFields_2 = temp_tExtractJSONFields_2
												.createXPath("dept");
										xTmp2_tExtractJSONFields_2
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_2);
										Object obj2_tExtractJSONFields_2 = xTmp2_tExtractJSONFields_2
												.evaluate(temp_tExtractJSONFields_2);
										if (obj2_tExtractJSONFields_2 instanceof String
												|| obj2_tExtractJSONFields_2 instanceof Number) {
											node_tExtractJSONFields_2 = temp_tExtractJSONFields_2;
											str_tExtractJSONFields_2 = String
													.valueOf(obj2_tExtractJSONFields_2);
										} else {
											node_tExtractJSONFields_2 = xTmp2_tExtractJSONFields_2
													.selectSingleNode(temp_tExtractJSONFields_2);

											str_tExtractJSONFields_2 = xTmp2_tExtractJSONFields_2
													.valueOf(temp_tExtractJSONFields_2);

										}

										if (xml_api_tExtractJSONFields_2
												.isDefNull(node_tExtractJSONFields_2)) {
											row21.dept = null;
										} else if (xml_api_tExtractJSONFields_2
												.isEmpty(node_tExtractJSONFields_2)) {
											row21.dept = "";
										} else if (xml_api_tExtractJSONFields_2
												.isMissing(node_tExtractJSONFields_2)) {
											row21.dept = null;
										} else {

											row21.dept = str_tExtractJSONFields_2;

										}

									} catch (java.lang.Exception ex_tExtractJSONFields_2) {
										System.err
												.println(ex_tExtractJSONFields_2
														.getMessage());
										row21 = null;
									}
								}

								isStructError_tExtractJSONFields_2 = false;

								tos_count_tExtractJSONFields_2++;

								/**
								 * [tExtractJSONFields_2 main ] stop
								 */

								/**
								 * [tExtractJSONFields_2 process_data_begin ]
								 * start
								 */

								currentComponent = "tExtractJSONFields_2";

								/**
								 * [tExtractJSONFields_2 process_data_begin ]
								 * stop
								 */
								// Start of branch "row21"
								if (row21 != null) {

									/**
									 * [tFileOutputJSON_1 main ] start
									 */

									currentComponent = "tFileOutputJSON_1";

									// row21
									// row21

									if (execStat) {
										runStat.updateStatOnConnection("row21"
												+ iterateId, 1, 1);
									}

									org.json.simple.JSONObject jsonRowtFileOutputJSON_1 = new org.json.simple.JSONObject();
									if (row21.firstname != null) {

										jsonRowtFileOutputJSON_1.put(
												"firstname", row21.firstname);

									} else {
										jsonRowtFileOutputJSON_1.put(
												"firstname", null);
									}

									if (row21.lastname != null) {

										jsonRowtFileOutputJSON_1.put(
												"lastname", row21.lastname);

									} else {
										jsonRowtFileOutputJSON_1.put(
												"lastname", null);
									}

									if (row21.dept != null) {

										jsonRowtFileOutputJSON_1.put("dept",
												row21.dept);

									} else {
										jsonRowtFileOutputJSON_1.put("dept",
												null);
									}

									if (!isFirst_tFileOutputJSON_1) {
										outtFileOutputJSON_1.append(",");
									}
									isFirst_tFileOutputJSON_1 = false;
									outtFileOutputJSON_1
											.append(jsonRowtFileOutputJSON_1
													.toJSONString());
									nb_line_tFileOutputJSON_1++;

									tos_count_tFileOutputJSON_1++;

									/**
									 * [tFileOutputJSON_1 main ] stop
									 */

									/**
									 * [tFileOutputJSON_1 process_data_begin ]
									 * start
									 */

									currentComponent = "tFileOutputJSON_1";

									/**
									 * [tFileOutputJSON_1 process_data_begin ]
									 * stop
									 */

									/**
									 * [tFileOutputJSON_1 process_data_end ]
									 * start
									 */

									currentComponent = "tFileOutputJSON_1";

									/**
									 * [tFileOutputJSON_1 process_data_end ]
									 * stop
									 */

								} // End of branch "row21"

								// end for
							}

						} // C_01

						/**
						 * [tExtractJSONFields_2 process_data_end ] start
						 */

						currentComponent = "tExtractJSONFields_2";

						/**
						 * [tExtractJSONFields_2 process_data_end ] stop
						 */

						/**
						 * [tWriteJSONField_1_In process_data_end ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_In";

						/**
						 * [tWriteJSONField_1_In process_data_end ] stop
						 */

						/**
						 * [tWriteJSONField_1_In end ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_In";

					}
				}

				String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"
						+ (queue_tWriteJSONField_1_In == null ? ""
								: queue_tWriteJSONField_1_In.hashCode());
				if (globalMap
						.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In)) {
					if (!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
						globalMap
								.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In,
										null);// syn
					}
					globalMap
							.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In);
					return;
				}
				globalMap.remove("queue_tWriteJSONField_1_In");

				if (!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap
							.put(readFinishMarkWithPipeId_tWriteJSONField_1_In,
									null);// syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_1_In);

				globalMap.put("tWriteJSONField_1_NB_LINE",
						nb_line_tWriteJSONField_1_In);

				ok_Hash.put("tWriteJSONField_1_In", true);
				end_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());

				/**
				 * [tWriteJSONField_1_In end ] stop
				 */

				/**
				 * [tExtractJSONFields_2 end ] start
				 */

				currentComponent = "tExtractJSONFields_2";

				globalMap.put("tExtractJSONFields_1_NB_LINE",
						nb_line_tExtractJSONFields_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row20" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tExtractJSONFields_2", true);
				end_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_2 end ] stop
				 */

				/**
				 * [tFileOutputJSON_1 end ] start
				 */

				currentComponent = "tFileOutputJSON_1";

				outtFileOutputJSON_1.print("]}");
				outtFileOutputJSON_1.close();
				globalMap.put("tFileOutputJSON_1_NB_LINE",
						nb_line_tFileOutputJSON_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row21" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputJSON_1", true);
				end_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileOutputJSON_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWriteJSONField_1_In finally ] start
				 */

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_In";

				/**
				 * [tWriteJSONField_1_In finally ] stop
				 */

				/**
				 * [tExtractJSONFields_2 finally ] start
				 */

				currentComponent = "tExtractJSONFields_2";

				/**
				 * [tExtractJSONFields_2 finally ] stop
				 */

				/**
				 * [tFileOutputJSON_1 finally ] start
				 */

				currentComponent = "tFileOutputJSON_1";

				/**
				 * [tFileOutputJSON_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final test testClass = new test();

		int exitCode = testClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = test.class.getClassLoader()
					.getResourceAsStream(
							"technip/test_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = test.class.getClassLoader().getResourceAsStream(
						"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("ID", "id_String");

			context.ID = (String) context.getProperty("ID");
			context.setContextType("FULL_Endpt", "id_String");

			context.FULL_Endpt = (String) context.getProperty("FULL_Endpt");
			context.setContextType("FULL_PassW", "id_Password");

			String pwd_FULL_PassW_value = context.getProperty("FULL_PassW");
			context.FULL_PassW = null;
			if (pwd_FULL_PassW_value != null) {
				if (context_param.containsKey("FULL_PassW")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.FULL_PassW = pwd_FULL_PassW_value;
				} else if (!pwd_FULL_PassW_value.isEmpty()) {
					try {
						context.FULL_PassW = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_FULL_PassW_value);
						context.put("FULL_PassW", context.FULL_PassW);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("FULL_SecuK", "id_Password");

			String pwd_FULL_SecuK_value = context.getProperty("FULL_SecuK");
			context.FULL_SecuK = null;
			if (pwd_FULL_SecuK_value != null) {
				if (context_param.containsKey("FULL_SecuK")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.FULL_SecuK = pwd_FULL_SecuK_value;
				} else if (!pwd_FULL_SecuK_value.isEmpty()) {
					try {
						context.FULL_SecuK = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_FULL_SecuK_value);
						context.put("FULL_SecuK", context.FULL_SecuK);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("FULL_UserId", "id_String");

			context.FULL_UserId = (String) context.getProperty("FULL_UserId");
			context.setContextType("CIBLE_Endpt", "id_String");

			context.CIBLE_Endpt = (String) context.getProperty("CIBLE_Endpt");
			context.setContextType("CIBLE_PassW", "id_Password");

			String pwd_CIBLE_PassW_value = context.getProperty("CIBLE_PassW");
			context.CIBLE_PassW = null;
			if (pwd_CIBLE_PassW_value != null) {
				if (context_param.containsKey("CIBLE_PassW")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.CIBLE_PassW = pwd_CIBLE_PassW_value;
				} else if (!pwd_CIBLE_PassW_value.isEmpty()) {
					try {
						context.CIBLE_PassW = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_CIBLE_PassW_value);
						context.put("CIBLE_PassW", context.CIBLE_PassW);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("CIBLE_SecuK", "id_Password");

			String pwd_CIBLE_SecuK_value = context.getProperty("CIBLE_SecuK");
			context.CIBLE_SecuK = null;
			if (pwd_CIBLE_SecuK_value != null) {
				if (context_param.containsKey("CIBLE_SecuK")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.CIBLE_SecuK = pwd_CIBLE_SecuK_value;
				} else if (!pwd_CIBLE_SecuK_value.isEmpty()) {
					try {
						context.CIBLE_SecuK = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_CIBLE_SecuK_value);
						context.put("CIBLE_SecuK", context.CIBLE_SecuK);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("CIBLE_UserId", "id_String");

			context.CIBLE_UserId = (String) context.getProperty("CIBLE_UserId");
			context.setContextType("SOURCE_Endpt", "id_String");

			context.SOURCE_Endpt = (String) context.getProperty("SOURCE_Endpt");
			context.setContextType("SOURCE_PassW", "id_Password");

			String pwd_SOURCE_PassW_value = context.getProperty("SOURCE_PassW");
			context.SOURCE_PassW = null;
			if (pwd_SOURCE_PassW_value != null) {
				if (context_param.containsKey("SOURCE_PassW")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.SOURCE_PassW = pwd_SOURCE_PassW_value;
				} else if (!pwd_SOURCE_PassW_value.isEmpty()) {
					try {
						context.SOURCE_PassW = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_SOURCE_PassW_value);
						context.put("SOURCE_PassW", context.SOURCE_PassW);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("SOURCE_SecuK", "id_Password");

			String pwd_SOURCE_SecuK_value = context.getProperty("SOURCE_SecuK");
			context.SOURCE_SecuK = null;
			if (pwd_SOURCE_SecuK_value != null) {
				if (context_param.containsKey("SOURCE_SecuK")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.SOURCE_SecuK = pwd_SOURCE_SecuK_value;
				} else if (!pwd_SOURCE_SecuK_value.isEmpty()) {
					try {
						context.SOURCE_SecuK = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_SOURCE_SecuK_value);
						context.put("SOURCE_SecuK", context.SOURCE_SecuK);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("SOURCE_UserId", "id_String");

			context.SOURCE_UserId = (String) context
					.getProperty("SOURCE_UserId");
			context.setContextType("offset", "id_Integer");

			try {
				context.offset = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("offset"));
			} catch (NumberFormatException e) {
				System.err.println(String.format(
						"Null value will be used for context parameter %s: %s",
						"offset", e.getMessage()));
				context.offset = null;
			}
			context.setContextType("idcont", "id_String");

			context.idcont = (String) context.getProperty("idcont");
			context.setContextType("identif", "id_Integer");

			try {
				context.identif = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("identif"));
			} catch (NumberFormatException e) {
				System.err.println(String.format(
						"Null value will be used for context parameter %s: %s",
						"identif", e.getMessage()));
				context.identif = null;
			}
			context.setContextType("somme", "id_Integer");

			try {
				context.somme = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("somme"));
			} catch (NumberFormatException e) {
				System.err.println(String.format(
						"Null value will be used for context parameter %s: %s",
						"somme", e.getMessage()));
				context.somme = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ID")) {
				context.ID = (String) parentContextMap.get("ID");
			}
			if (parentContextMap.containsKey("FULL_Endpt")) {
				context.FULL_Endpt = (String) parentContextMap
						.get("FULL_Endpt");
			}
			if (parentContextMap.containsKey("FULL_PassW")) {
				context.FULL_PassW = (java.lang.String) parentContextMap
						.get("FULL_PassW");
			}
			if (parentContextMap.containsKey("FULL_SecuK")) {
				context.FULL_SecuK = (java.lang.String) parentContextMap
						.get("FULL_SecuK");
			}
			if (parentContextMap.containsKey("FULL_UserId")) {
				context.FULL_UserId = (String) parentContextMap
						.get("FULL_UserId");
			}
			if (parentContextMap.containsKey("CIBLE_Endpt")) {
				context.CIBLE_Endpt = (String) parentContextMap
						.get("CIBLE_Endpt");
			}
			if (parentContextMap.containsKey("CIBLE_PassW")) {
				context.CIBLE_PassW = (java.lang.String) parentContextMap
						.get("CIBLE_PassW");
			}
			if (parentContextMap.containsKey("CIBLE_SecuK")) {
				context.CIBLE_SecuK = (java.lang.String) parentContextMap
						.get("CIBLE_SecuK");
			}
			if (parentContextMap.containsKey("CIBLE_UserId")) {
				context.CIBLE_UserId = (String) parentContextMap
						.get("CIBLE_UserId");
			}
			if (parentContextMap.containsKey("SOURCE_Endpt")) {
				context.SOURCE_Endpt = (String) parentContextMap
						.get("SOURCE_Endpt");
			}
			if (parentContextMap.containsKey("SOURCE_PassW")) {
				context.SOURCE_PassW = (java.lang.String) parentContextMap
						.get("SOURCE_PassW");
			}
			if (parentContextMap.containsKey("SOURCE_SecuK")) {
				context.SOURCE_SecuK = (java.lang.String) parentContextMap
						.get("SOURCE_SecuK");
			}
			if (parentContextMap.containsKey("SOURCE_UserId")) {
				context.SOURCE_UserId = (String) parentContextMap
						.get("SOURCE_UserId");
			}
			if (parentContextMap.containsKey("offset")) {
				context.offset = (Integer) parentContextMap.get("offset");
			}
			if (parentContextMap.containsKey("idcont")) {
				context.idcont = (String) parentContextMap.get("idcont");
			}
			if (parentContextMap.containsKey("identif")) {
				context.identif = (Integer) parentContextMap.get("identif");
			}
			if (parentContextMap.containsKey("somme")) {
				context.somme = (Integer) parentContextMap.get("somme");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("FULL_PassW");
		parametersToEncrypt.add("FULL_SecuK");
		parametersToEncrypt.add("CIBLE_PassW");
		parametersToEncrypt.add("CIBLE_SecuK");
		parametersToEncrypt.add("SOURCE_PassW");
		parametersToEncrypt.add("SOURCE_SecuK");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		try {
			errorCode = null;
			Implicit_Context_RegexProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_Implicit_Context_Regex) {
			globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", -1);

			e_Implicit_Context_Regex.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFixedFlowInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFixedFlowInput_4) {
			globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", -1);

			e_tFixedFlowInput_4.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : test");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 115910 characters generated by Talend Open Studio for Data Integration on the
 * 30 janvier 2020 16:26:46 CET
 ************************************************************************************************/
