// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package technip.test_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: test Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class test implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ID != null) {

				this.setProperty("ID", ID.toString());

			}

			if (FULL_Endpt != null) {

				this.setProperty("FULL_Endpt", FULL_Endpt.toString());

			}

			if (FULL_PassW != null) {

				this.setProperty("FULL_PassW", FULL_PassW.toString());

			}

			if (FULL_SecuK != null) {

				this.setProperty("FULL_SecuK", FULL_SecuK.toString());

			}

			if (FULL_UserId != null) {

				this.setProperty("FULL_UserId", FULL_UserId.toString());

			}

			if (CIBLE_Endpt != null) {

				this.setProperty("CIBLE_Endpt", CIBLE_Endpt.toString());

			}

			if (CIBLE_PassW != null) {

				this.setProperty("CIBLE_PassW", CIBLE_PassW.toString());

			}

			if (CIBLE_SecuK != null) {

				this.setProperty("CIBLE_SecuK", CIBLE_SecuK.toString());

			}

			if (CIBLE_UserId != null) {

				this.setProperty("CIBLE_UserId", CIBLE_UserId.toString());

			}

			if (SOURCE_Endpt != null) {

				this.setProperty("SOURCE_Endpt", SOURCE_Endpt.toString());

			}

			if (SOURCE_PassW != null) {

				this.setProperty("SOURCE_PassW", SOURCE_PassW.toString());

			}

			if (SOURCE_SecuK != null) {

				this.setProperty("SOURCE_SecuK", SOURCE_SecuK.toString());

			}

			if (SOURCE_UserId != null) {

				this.setProperty("SOURCE_UserId", SOURCE_UserId.toString());

			}

			if (offset != null) {

				this.setProperty("offset", offset.toString());

			}

		}

		public String ID;

		public String getID() {
			return this.ID;
		}

		public String FULL_Endpt;

		public String getFULL_Endpt() {
			return this.FULL_Endpt;
		}

		public java.lang.String FULL_PassW;

		public java.lang.String getFULL_PassW() {
			return this.FULL_PassW;
		}

		public java.lang.String FULL_SecuK;

		public java.lang.String getFULL_SecuK() {
			return this.FULL_SecuK;
		}

		public String FULL_UserId;

		public String getFULL_UserId() {
			return this.FULL_UserId;
		}

		public String CIBLE_Endpt;

		public String getCIBLE_Endpt() {
			return this.CIBLE_Endpt;
		}

		public java.lang.String CIBLE_PassW;

		public java.lang.String getCIBLE_PassW() {
			return this.CIBLE_PassW;
		}

		public java.lang.String CIBLE_SecuK;

		public java.lang.String getCIBLE_SecuK() {
			return this.CIBLE_SecuK;
		}

		public String CIBLE_UserId;

		public String getCIBLE_UserId() {
			return this.CIBLE_UserId;
		}

		public String SOURCE_Endpt;

		public String getSOURCE_Endpt() {
			return this.SOURCE_Endpt;
		}

		public java.lang.String SOURCE_PassW;

		public java.lang.String getSOURCE_PassW() {
			return this.SOURCE_PassW;
		}

		public java.lang.String SOURCE_SecuK;

		public java.lang.String getSOURCE_SecuK() {
			return this.SOURCE_SecuK;
		}

		public String SOURCE_UserId;

		public String getSOURCE_UserId() {
			return this.SOURCE_UserId;
		}

		public Integer offset;

		public Integer getOffset() {
			return this.offset;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "test";
	private final String projectName = "TECHNIP";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					test.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(test.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void Implicit_Context_Regex_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		Implicit_Context_Context_error(exception, errorComponent, globalMap);

	}

	public void Implicit_Context_Context_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		Implicit_Context_Regex_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSalesforceInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError3", 0, "error");
			}

			errorCode = null;
			tDie_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tSalesforceConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSalesforceConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError4", 0, "error");
			}

			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tSalesforceConnection_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void Implicit_Context_Regex_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row_Implicit_Context_RegexStruct implements
			routines.system.IPersistableRow<row_Implicit_Context_RegexStruct> {
		final static byte[] commonByteArrayLock_TECHNIP_test = new byte[0];
		static byte[] commonByteArray_TECHNIP_test = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TECHNIP_test.length) {
					if (length < 1024
							&& commonByteArray_TECHNIP_test.length == 0) {
						commonByteArray_TECHNIP_test = new byte[1024];
					} else {
						commonByteArray_TECHNIP_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TECHNIP_test, 0, length);
				strReturn = new String(commonByteArray_TECHNIP_test, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TECHNIP_test) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_Implicit_Context_RegexStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void Implicit_Context_RegexProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_Implicit_Context_RegexStruct row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();

				/**
				 * [Implicit_Context_Context begin ] start
				 */

				ok_Hash.put("Implicit_Context_Context", false);
				start_Hash.put("Implicit_Context_Context",
						System.currentTimeMillis());

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_Implicit_Context_Context = 0;

				java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				int nb_line_Implicit_Context_Context = 0;

				/**
				 * [Implicit_Context_Context begin ] stop
				 */

				/**
				 * [Implicit_Context_Regex begin ] start
				 */

				ok_Hash.put("Implicit_Context_Regex", false);
				start_Hash.put("Implicit_Context_Regex",
						System.currentTimeMillis());

				currentVirtualComponent = "Implicit_Context_Regex";

				currentComponent = "Implicit_Context_Regex";

				int tos_count_Implicit_Context_Regex = 0;

				int nb_line_Implicit_Context_Regex = 0;

				int footer_Implicit_Context_Regex = 0;
				boolean removeEmptyRowImplicit_Context_Regex = true;
				Object source_Implicit_Context_Regex = /**
				 * Start field
				 * Implicit_Context_Regex:FILENAME
				 */
				"C:/Users/Cillia/Desktop/TalendWork/Commun/config.properties"/**
				 * 
				 * End field Implicit_Context_Regex:FILENAME
				 */
				;

				org.talend.fileprocess.TOSDelimitedReader inImplicit_Context_Regex = null;
				if (source_Implicit_Context_Regex instanceof String
						|| source_Implicit_Context_Regex instanceof java.io.InputStream) {
					inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/**
					 * 
					 * Start field Implicit_Context_Regex:FILENAME
					 */
					"C:/Users/Cillia/Desktop/TalendWork/Commun/config.properties"/**
					 * 
					 * End field Implicit_Context_Regex:FILENAME
					 */
					, "ISO-8859-15", "", "\n",
							removeEmptyRowImplicit_Context_Regex);
				} else {
					throw new java.lang.Exception(
							"The source data should be specified as File Path or InputStream or java.io.Reader!");
				}
				String strImplicit_Context_Regex;
				int totalLineImplicit_Context_Regex = 0, currentLineImplicit_Context_Regex = 0, beginLineImplicit_Context_Regex = 0, lastLineImplicit_Context_Regex = -1, validRowCountImplicit_Context_Regex = 0;
				int limitImplicit_Context_Regex = -1;

				int headerImplicit_Context_Regex = 0;
				if (headerImplicit_Context_Regex > 0) {
					beginLineImplicit_Context_Regex = headerImplicit_Context_Regex + 1;
				}

				if (footer_Implicit_Context_Regex > 0) {
					while (inImplicit_Context_Regex.readRecord()) {
						strImplicit_Context_Regex = inImplicit_Context_Regex
								.getRowRecord();
						totalLineImplicit_Context_Regex++;
					}
					int lastLineTempImplicit_Context_Regex = totalLineImplicit_Context_Regex
							- footer_Implicit_Context_Regex < 0 ? 0
							: totalLineImplicit_Context_Regex
									- footer_Implicit_Context_Regex;
					if (lastLineImplicit_Context_Regex > 0) {
						lastLineImplicit_Context_Regex = lastLineImplicit_Context_Regex < lastLineTempImplicit_Context_Regex ? lastLineImplicit_Context_Regex
								: lastLineTempImplicit_Context_Regex;
					} else {
						lastLineImplicit_Context_Regex = lastLineTempImplicit_Context_Regex;
					}
					inImplicit_Context_Regex.close();
					inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/**
					 * 
					 * Start field Implicit_Context_Regex:FILENAME
					 */
					"C:/Users/Cillia/Desktop/TalendWork/Commun/config.properties"/**
					 * 
					 * End field Implicit_Context_Regex:FILENAME
					 */
					, "ISO-8859-15", "", "\n",
							removeEmptyRowImplicit_Context_Regex);
				}
				java.util.StringTokenizer strTokenImplicit_Context_Regex;
				java.util.regex.Pattern patternImplicit_Context_Regex = java.util.regex.Pattern
						.compile("^([^" + "==" + "]*)" + "==" + "(.*)$");
				java.util.regex.Matcher matcherImplicit_Context_Regex = null;

				while (inImplicit_Context_Regex.readRecord()) {
					strImplicit_Context_Regex = inImplicit_Context_Regex
							.getRowRecord();

					currentLineImplicit_Context_Regex++;
					if (currentLineImplicit_Context_Regex < beginLineImplicit_Context_Regex) {
						continue;
					}
					if (lastLineImplicit_Context_Regex > -1
							&& currentLineImplicit_Context_Regex > lastLineImplicit_Context_Regex) {
						break;
					}
					if (removeEmptyRowImplicit_Context_Regex
							&& ("").equals(strImplicit_Context_Regex)) {
						continue;
					}
					if (limitImplicit_Context_Regex != -1
							&& validRowCountImplicit_Context_Regex >= limitImplicit_Context_Regex) {
						break;
					}

					matcherImplicit_Context_Regex = patternImplicit_Context_Regex
							.matcher(strImplicit_Context_Regex);
					int groupCountImplicit_Context_Regex = 0;
					boolean isMatchImplicit_Context_Regex = matcherImplicit_Context_Regex
							.find();
					if (isMatchImplicit_Context_Regex) {
						groupCountImplicit_Context_Regex = matcherImplicit_Context_Regex
								.groupCount();
					}
					row_Implicit_Context_Regex = null;

					boolean lineIsEmptyImplicit_Context_Regex = strImplicit_Context_Regex
							.length() == 0;

					String[] valueImplicit_Context_Regex = new String[2];
					String frontCharImplicit_Context_Regex, behindCharImplicit_Context_Regex;
					for (int i = 0; i < 2; i++) {
						valueImplicit_Context_Regex[i] = "";
						if (lineIsEmptyImplicit_Context_Regex) {
							continue;
						}
						if (i < groupCountImplicit_Context_Regex) {
							valueImplicit_Context_Regex[i] = matcherImplicit_Context_Regex
									.group(i + 1);
						}
					}
					validRowCountImplicit_Context_Regex++;

					boolean whetherReject_Implicit_Context_Regex = false;
					row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();
					try {
						if (!isMatchImplicit_Context_Regex) {// line data not
																// matched with
																// given regex
																// parameter
							throw new java.lang.Exception(
									"Line doesn't match: "
											+ strImplicit_Context_Regex);
						}

						if (valueImplicit_Context_Regex[0] != null
								&& valueImplicit_Context_Regex[0].length() > 0) {
							row_Implicit_Context_Regex.key = valueImplicit_Context_Regex[0];
						} else {
							row_Implicit_Context_Regex.key = "";
						}

						if (valueImplicit_Context_Regex[1] != null
								&& valueImplicit_Context_Regex[1].length() > 0) {
							row_Implicit_Context_Regex.value = valueImplicit_Context_Regex[1];
						} else {
							row_Implicit_Context_Regex.value = "";
						}

					} catch (java.lang.Exception e) {
						whetherReject_Implicit_Context_Regex = true;
						if (isMatchImplicit_Context_Regex) {
							System.err.println(e.getMessage());
						}
						row_Implicit_Context_Regex = null;
					}

					nb_line_Implicit_Context_Regex++;

					/**
					 * [Implicit_Context_Regex begin ] stop
					 */

					/**
					 * [Implicit_Context_Regex main ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

					tos_count_Implicit_Context_Regex++;

					/**
					 * [Implicit_Context_Regex main ] stop
					 */

					/**
					 * [Implicit_Context_Regex process_data_begin ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

					/**
					 * [Implicit_Context_Regex process_data_begin ] stop
					 */
					// Start of branch "row_Implicit_Context_Regex"
					if (row_Implicit_Context_Regex != null) {

						/**
						 * [Implicit_Context_Context main ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						// Main
						// row_Implicit_Context_Regex

						if (execStat) {
							runStat.updateStatOnConnection("Main" + iterateId,
									1, 1);
						}

						// ////////////////////////
						String tmp_key_Implicit_Context_Context = null;
						String key_Implicit_Context_Context = null;
						if (row_Implicit_Context_Regex.key != null) {
							tmp_key_Implicit_Context_Context = row_Implicit_Context_Regex.key
									.trim();
							if ((tmp_key_Implicit_Context_Context
									.startsWith("#") || tmp_key_Implicit_Context_Context
									.startsWith("!"))) {
								tmp_key_Implicit_Context_Context = null;
							} else {
								row_Implicit_Context_Regex.key = tmp_key_Implicit_Context_Context;
							}
						}
						if (row_Implicit_Context_Regex.key != null) {
							key_Implicit_Context_Context = row_Implicit_Context_Regex.key;
						}
						String value_Implicit_Context_Context = null;
						if (row_Implicit_Context_Regex.value != null) {
							value_Implicit_Context_Context = row_Implicit_Context_Regex.value;
						}

						String currentValue_Implicit_Context_Context = value_Implicit_Context_Context;

						if ((key_Implicit_Context_Context != null)
								&& ("FULL_PassW"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");
						if ((key_Implicit_Context_Context != null)
								&& ("FULL_SecuK"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");
						if ((key_Implicit_Context_Context != null)
								&& ("CIBLE_PassW"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");
						if ((key_Implicit_Context_Context != null)
								&& ("CIBLE_SecuK"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");
						if ((key_Implicit_Context_Context != null)
								&& ("SOURCE_PassW"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");
						if ((key_Implicit_Context_Context != null)
								&& ("SOURCE_SecuK"
										.equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");

						if (tmp_key_Implicit_Context_Context != null) {
							try {
								if (key_Implicit_Context_Context != null
										&& "ID".equals(key_Implicit_Context_Context)) {
									context.ID = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "FULL_Endpt"
												.equals(key_Implicit_Context_Context)) {
									context.FULL_Endpt = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "FULL_PassW"
												.equals(key_Implicit_Context_Context)) {
									context.FULL_PassW = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "FULL_SecuK"
												.equals(key_Implicit_Context_Context)) {
									context.FULL_SecuK = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "FULL_UserId"
												.equals(key_Implicit_Context_Context)) {
									context.FULL_UserId = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "CIBLE_Endpt"
												.equals(key_Implicit_Context_Context)) {
									context.CIBLE_Endpt = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "CIBLE_PassW"
												.equals(key_Implicit_Context_Context)) {
									context.CIBLE_PassW = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "CIBLE_SecuK"
												.equals(key_Implicit_Context_Context)) {
									context.CIBLE_SecuK = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "CIBLE_UserId"
												.equals(key_Implicit_Context_Context)) {
									context.CIBLE_UserId = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "SOURCE_Endpt"
												.equals(key_Implicit_Context_Context)) {
									context.SOURCE_Endpt = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "SOURCE_PassW"
												.equals(key_Implicit_Context_Context)) {
									context.SOURCE_PassW = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "SOURCE_SecuK"
												.equals(key_Implicit_Context_Context)) {
									context.SOURCE_SecuK = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "SOURCE_UserId"
												.equals(key_Implicit_Context_Context)) {
									context.SOURCE_UserId = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "offset"
												.equals(key_Implicit_Context_Context)) {

									context.offset = Integer
											.parseInt(value_Implicit_Context_Context);

								}

								if (context
										.getProperty(key_Implicit_Context_Context) != null) {
									assignList_Implicit_Context_Context
											.add(key_Implicit_Context_Context);
								} else {
									newPropertyList_Implicit_Context_Context
											.add(key_Implicit_Context_Context);
								}
								if (value_Implicit_Context_Context == null) {
									context.setProperty(
											key_Implicit_Context_Context, "");
								} else {
									context.setProperty(
											key_Implicit_Context_Context,
											value_Implicit_Context_Context);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_Implicit_Context_Context
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_Implicit_Context_Context++;
						}
						// ////////////////////////

						tos_count_Implicit_Context_Context++;

						/**
						 * [Implicit_Context_Context main ] stop
						 */

						/**
						 * [Implicit_Context_Context process_data_begin ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						/**
						 * [Implicit_Context_Context process_data_begin ] stop
						 */

						/**
						 * [Implicit_Context_Context process_data_end ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						/**
						 * [Implicit_Context_Context process_data_end ] stop
						 */

					} // End of branch "row_Implicit_Context_Regex"

					/**
					 * [Implicit_Context_Regex process_data_end ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

					/**
					 * [Implicit_Context_Regex process_data_end ] stop
					 */

					/**
					 * [Implicit_Context_Regex end ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

				}
				if (!(source_Implicit_Context_Regex instanceof java.io.InputStream)) {
					inImplicit_Context_Regex.close();
				}
				inImplicit_Context_Regex = null;
				globalMap.put("Implicit_Context_Regex_NB_LINE",
						nb_line_Implicit_Context_Regex);

				ok_Hash.put("Implicit_Context_Regex", true);
				end_Hash.put("Implicit_Context_Regex",
						System.currentTimeMillis());

				/**
				 * [Implicit_Context_Regex end ] stop
				 */

				/**
				 * [Implicit_Context_Context end ] start
				 */

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				java.util.Enumeration<?> enu_Implicit_Context_Context = context
						.propertyNames();
				while (enu_Implicit_Context_Context.hasMoreElements()) {
					String key_Implicit_Context_Context = (String) enu_Implicit_Context_Context
							.nextElement();
					if (!assignList_Implicit_Context_Context
							.contains(key_Implicit_Context_Context)
							&& !newPropertyList_Implicit_Context_Context
									.contains(key_Implicit_Context_Context)) {
						noAssignList_Implicit_Context_Context
								.add(key_Implicit_Context_Context);
					}
				}

				String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context
						.toString();
				String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context
						.substring(1, newPropertyStr_Implicit_Context_Context
								.length() - 1);

				String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context
						.toString();
				String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context
						.substring(
								1,
								noAssignStr_Implicit_Context_Context.length() - 1);

				globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT",
						newProperty_Implicit_Context_Context);
				globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED",
						noAssign_Implicit_Context_Context);

				globalMap.put("Implicit_Context_Context_NB_LINE",
						nb_line_Implicit_Context_Context);

				List<String> parametersToEncrypt_Implicit_Context_Context = new java.util.ArrayList<String>();

				parametersToEncrypt_Implicit_Context_Context.add("FULL_PassW");

				parametersToEncrypt_Implicit_Context_Context.add("FULL_SecuK");

				parametersToEncrypt_Implicit_Context_Context.add("CIBLE_PassW");

				parametersToEncrypt_Implicit_Context_Context.add("CIBLE_SecuK");

				parametersToEncrypt_Implicit_Context_Context
						.add("SOURCE_PassW");

				parametersToEncrypt_Implicit_Context_Context
						.add("SOURCE_SecuK");

				resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "",
						Thread.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_Implicit_Context_Context));

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("Implicit_Context_Context", true);
				end_Hash.put("Implicit_Context_Context",
						System.currentTimeMillis());

				/**
				 * [Implicit_Context_Context end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [Implicit_Context_Regex finally ] start
				 */

				currentVirtualComponent = "Implicit_Context_Regex";

				currentComponent = "Implicit_Context_Regex";

				/**
				 * [Implicit_Context_Regex finally ] stop
				 */

				/**
				 * [Implicit_Context_Context finally ] start
				 */

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				/**
				 * [Implicit_Context_Context finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				try {
					globalMap.put("tDie_1_DIE_PRIORITY", 5);
					System.err.println("Erreur de connection à la cible");

					globalMap.put("tDie_1_DIE_MESSAGE",
							"Erreur de connection à la cible");
					globalMap.put("tDie_1_DIE_MESSAGES",
							"Erreur de connection à la cible");

				} catch (Exception | Error e_tDie_1) {
					logIgnoredError(
							String.format(
									"tDie_1 - tDie failed to log message due to internal error: %s",
									e_tDie_1), e_tDie_1);
				}

				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 process_data_begin ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_begin ] stop
				 */

				/**
				 * [tDie_1 process_data_end ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDie_2 begin ] start
				 */

				ok_Hash.put("tDie_2", false);
				start_Hash.put("tDie_2", System.currentTimeMillis());

				currentComponent = "tDie_2";

				int tos_count_tDie_2 = 0;

				/**
				 * [tDie_2 begin ] stop
				 */

				/**
				 * [tDie_2 main ] start
				 */

				currentComponent = "tDie_2";

				try {
					globalMap.put("tDie_2_DIE_PRIORITY", 5);
					System.err.println("Error de Connection à la Source");

					globalMap.put("tDie_2_DIE_MESSAGE",
							"Error de Connection à la Source");
					globalMap.put("tDie_2_DIE_MESSAGES",
							"Error de Connection à la Source");

				} catch (Exception | Error e_tDie_2) {
					logIgnoredError(
							String.format(
									"tDie_2 - tDie failed to log message due to internal error: %s",
									e_tDie_2), e_tDie_2);
				}

				currentComponent = "tDie_2";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_2_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_2++;

				/**
				 * [tDie_2 main ] stop
				 */

				/**
				 * [tDie_2 process_data_begin ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 process_data_begin ] stop
				 */

				/**
				 * [tDie_2 process_data_end ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 process_data_end ] stop
				 */

				/**
				 * [tDie_2 end ] start
				 */

				currentComponent = "tDie_2";

				ok_Hash.put("tDie_2", true);
				end_Hash.put("tDie_2", System.currentTimeMillis());

				/**
				 * [tDie_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_2 finally ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TECHNIP_test = new byte[0];
		static byte[] commonByteArray_TECHNIP_test = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TECHNIP_test) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tFlowToIterate_2 begin ] start
				 */

				int NB_ITERATE_tJava_5 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_2", false);
				start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFlowToIterate_2 = 0;

				int nb_line_tFlowToIterate_2 = 0;
				int counter_tFlowToIterate_2 = 0;

				/**
				 * [tFlowToIterate_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				try {

					Object filename_tFileInputDelimited_4 = "C:/Users/Cillia/Desktop/testoffset.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0
								|| random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/Cillia/Desktop/testoffset.csv",
								"UTF-8", ";", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null
							&& fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row10 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row10 = new row10Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_4 = 0;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row10.ID = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ID", "row10",
															temp,
															ex_tFileInputDelimited_4),
													ex_tFileInputDelimited_4));
								}

							} else {

								row10.ID = null;

							}

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tFlowToIterate_2 main ] start
							 */

							currentComponent = "tFlowToIterate_2";

							// row10
							// row10

							if (execStat) {
								runStat.updateStatOnConnection("row10"
										+ iterateId, 1, 1);
							}

							globalMap.put("row10.ID", row10.ID);

							nb_line_tFlowToIterate_2++;
							counter_tFlowToIterate_2++;
							globalMap.put("tFlowToIterate_2_CURRENT_ITERATION",
									counter_tFlowToIterate_2);

							tos_count_tFlowToIterate_2++;

							/**
							 * [tFlowToIterate_2 main ] stop
							 */

							/**
							 * [tFlowToIterate_2 process_data_begin ] start
							 */

							currentComponent = "tFlowToIterate_2";

							/**
							 * [tFlowToIterate_2 process_data_begin ] stop
							 */
							NB_ITERATE_tJava_5++;

							if (execStat) {
								runStat.updateStatOnConnection(
										"OnComponentOk4", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("OnSubjobOk2",
										3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("row9", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("iterate4", 1,
										"exec" + NB_ITERATE_tJava_5);
								// Thread.sleep(1000);
							}

							/**
							 * [tJava_5 begin ] start
							 */

							ok_Hash.put("tJava_5", false);
							start_Hash.put("tJava_5",
									System.currentTimeMillis());

							currentComponent = "tJava_5";

							int tos_count_tJava_5 = 0;

							String foo = "bar";
							System.out.println(" avant " + context.offset);

							/**
							 * [tJava_5 begin ] stop
							 */

							/**
							 * [tJava_5 main ] start
							 */

							currentComponent = "tJava_5";

							tos_count_tJava_5++;

							/**
							 * [tJava_5 main ] stop
							 */

							/**
							 * [tJava_5 process_data_begin ] start
							 */

							currentComponent = "tJava_5";

							/**
							 * [tJava_5 process_data_begin ] stop
							 */

							/**
							 * [tJava_5 process_data_end ] start
							 */

							currentComponent = "tJava_5";

							/**
							 * [tJava_5 process_data_end ] stop
							 */

							/**
							 * [tJava_5 end ] start
							 */

							currentComponent = "tJava_5";

							ok_Hash.put("tJava_5", true);
							end_Hash.put("tJava_5", System.currentTimeMillis());

							if (execStat) {
								runStat.updateStatOnConnection(
										"OnComponentOk4", 0, "ok");
							}
							tSalesforceInput_3Process(globalMap);

							/**
							 * [tJava_5 end ] stop
							 */
							if (execStat) {
								runStat.updateStatOnConnection("iterate4", 2,
										"exec" + NB_ITERATE_tJava_5);
							}

							/**
							 * [tFlowToIterate_2 process_data_end ] start
							 */

							currentComponent = "tFlowToIterate_2";

							/**
							 * [tFlowToIterate_2 process_data_end ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/Users/Cillia/Desktop/testoffset.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tFlowToIterate_2 end ] start
				 */

				currentComponent = "tFlowToIterate_2";

				globalMap.put("tFlowToIterate_2_NB_LINE",
						nb_line_tFlowToIterate_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFlowToIterate_2", true);
				end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tFlowToIterate_2 finally ] start
				 */

				currentComponent = "tFlowToIterate_2";

				/**
				 * [tFlowToIterate_2 finally ] stop
				 */

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_TECHNIP_test = new byte[0];
		static byte[] commonByteArray_TECHNIP_test = new byte[0];

		public String Id;

		public String getId() {
			return this.Id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TECHNIP_test.length) {
					if (length < 1024
							&& commonByteArray_TECHNIP_test.length == 0) {
						commonByteArray_TECHNIP_test = new byte[1024];
					} else {
						commonByteArray_TECHNIP_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TECHNIP_test, 0, length);
				strReturn = new String(commonByteArray_TECHNIP_test, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TECHNIP_test) {

				try {

					int length = 0;

					this.Id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSalesforceInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:/Users/Cillia/Desktop/Nouveau dossier (2)/outOFSSET2.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					isFileGenerated_tFileOutputDelimited_3 = false;
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, true),
								"ISO-8859-15"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("Id");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tSalesforceInput_3 begin ] start
				 */

				ok_Hash.put("tSalesforceInput_3", false);
				start_Hash
						.put("tSalesforceInput_3", System.currentTimeMillis());

				currentComponent = "tSalesforceInput_3";

				int tos_count_tSalesforceInput_3 = 0;

				org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_3 = new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

				org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_3 = (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_3
						.createRuntimeProperties();
				props_tSalesforceInput_3
						.setValue(
								"queryMode",
								org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);

				props_tSalesforceInput_3.setValue("manualQuery", true);

				props_tSalesforceInput_3.setValue("query",
						"SELECT Id  FROM FAMSA__c LIMIT 200   offset   "
								+ context.offset + " ");

				props_tSalesforceInput_3.setValue("includeDeleted", false);

				props_tSalesforceInput_3.setValue("batchSize", 250);

				props_tSalesforceInput_3.setValue("normalizeDelimiter", ";");

				props_tSalesforceInput_3.setValue("columnNameDelimiter", "_");

				props_tSalesforceInput_3.connection.userPassword.setValue(
						"useAuth", false);

				props_tSalesforceInput_3.connection.proxy.userPassword
						.setValue("useAuth", false);

				props_tSalesforceInput_3.connection.referencedComponent
						.setValue(
								"referenceType",
								org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tSalesforceInput_3.connection.referencedComponent
						.setValue("componentInstanceId",
								"tSalesforceConnection_1");

				props_tSalesforceInput_3.connection.referencedComponent
						.setValue("referenceDefinitionName",
								"tSalesforceConnection");

				props_tSalesforceInput_3.module.setValue("moduleName",
						"FAMSA__c");

				props_tSalesforceInput_3.module.connection.userPassword
						.setValue("useAuth", false);

				props_tSalesforceInput_3.module.connection.proxy.userPassword
						.setValue("useAuth", false);

				props_tSalesforceInput_3.module.connection.referencedComponent
						.setValue(
								"referenceType",
								org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tSalesforceInput_3.module.connection.referencedComponent
						.setValue("componentInstanceId",
								"tSalesforceConnection_1");

				props_tSalesforceInput_3.module.connection.referencedComponent
						.setValue("referenceDefinitionName",
								"tSalesforceConnection");

				class SchemaSettingTool_tSalesforceInput_3_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"FAMSA__c\",\"fields\":[{", s);

						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"FAMSA__c\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tSalesforceInput_3_1_fisrt sst_tSalesforceInput_3_1_fisrt = new SchemaSettingTool_tSalesforceInput_3_1_fisrt();

				props_tSalesforceInput_3.module.main.setValue("schema",
						new org.apache.avro.Schema.Parser()
								.parse(sst_tSalesforceInput_3_1_fisrt
										.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_3.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tSalesforceInput_3 = props_tSalesforceInput_3.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tSalesforceInput_3 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_3 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tSalesforceInput_3
										+ "_COMPONENT_RUNTIME_PROPERTIES");
						props_tSalesforceInput_3.connection.referencedComponent
								.setReference(referencedComponentProperties_tSalesforceInput_3);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_3.module.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tSalesforceInput_3 = props_tSalesforceInput_3.module.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tSalesforceInput_3 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_3 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tSalesforceInput_3
										+ "_COMPONENT_RUNTIME_PROPERTIES");
						props_tSalesforceInput_3.module.connection.referencedComponent
								.setReference(referencedComponentProperties_tSalesforceInput_3);
					}
				}
				globalMap.put(
						"tSalesforceInput_3_COMPONENT_RUNTIME_PROPERTIES",
						props_tSalesforceInput_3);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.1");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.25.3");
				java.net.URL mappings_url_tSalesforceInput_3 = this.getClass()
						.getResource("/xmlMappings");
				globalMap.put("tSalesforceInput_3_MAPPINGS_URL",
						mappings_url_tSalesforceInput_3);

				org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_3 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId,
							String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId,
							String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tSalesforceInput_3";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tSalesforceInput_3 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_3 = null;
				topology_tSalesforceInput_3 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_3 = def_tSalesforceInput_3
						.getRuntimeInfo(
								org.talend.components.api.component.runtime.ExecutionEngine.DI,
								props_tSalesforceInput_3,
								topology_tSalesforceInput_3);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_3 = def_tSalesforceInput_3
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_3 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tSalesforceInput_3
								.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_3 = componentRuntime_tSalesforceInput_3
						.initialize(container_tSalesforceInput_3,
								props_tSalesforceInput_3);

				if (initVr_tSalesforceInput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(
							initVr_tSalesforceInput_3.getMessage());
				}

				if (componentRuntime_tSalesforceInput_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tSalesforceInput_3;
					compDriverInitialization_tSalesforceInput_3
							.runAtDriver(container_tSalesforceInput_3);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_3 = null;
				if (componentRuntime_tSalesforceInput_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tSalesforceInput_3 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tSalesforceInput_3;
					org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_3 = sourceOrSink_tSalesforceInput_3
							.validate(container_tSalesforceInput_3);
					if (vr_tSalesforceInput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(
								vr_tSalesforceInput_3.getMessage());
					}
				}

				org.talend.components.api.component.runtime.Source source_tSalesforceInput_3 = (org.talend.components.api.component.runtime.Source) sourceOrSink_tSalesforceInput_3;
				org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_3 = source_tSalesforceInput_3
						.createReader(container_tSalesforceInput_3);
				reader_tSalesforceInput_3 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(
						reader_tSalesforceInput_3, container_tSalesforceInput_3);

				boolean multi_output_is_allowed_tSalesforceInput_3 = false;
				org.talend.components.api.component.Connector c_tSalesforceInput_3 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_3
						.getAvailableConnectors(null, true)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tSalesforceInput_3 = currentConnector;
					}

					if (currentConnector.getName().equals("REJECT")) {// it's
																		// better
																		// to
																		// move
																		// the
																		// code
																		// to
																		// javajet
						multi_output_is_allowed_tSalesforceInput_3 = true;
					}
				}
				org.apache.avro.Schema schema_tSalesforceInput_3 = props_tSalesforceInput_3
						.getSchema(c_tSalesforceInput_3, true);

				org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_3 = org.talend.codegen.enforcer.EnforcerCreator
						.createOutgoingEnforcer(schema_tSalesforceInput_3,
								false);

				// Create a reusable factory that converts the output of the
				// reader to an IndexedRecord.
				org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_3 = null;

				// Iterate through the incoming data.
				boolean available_tSalesforceInput_3 = reader_tSalesforceInput_3
						.start();

				resourceMap.put("reader_tSalesforceInput_3",
						reader_tSalesforceInput_3);

				for (; available_tSalesforceInput_3; available_tSalesforceInput_3 = reader_tSalesforceInput_3
						.advance()) {
					nb_line_tSalesforceInput_3++;

					if (multi_output_is_allowed_tSalesforceInput_3) {
						row9 = null;

					}

					try {
						Object data_tSalesforceInput_3 = reader_tSalesforceInput_3
								.getCurrent();

						if (multi_output_is_allowed_tSalesforceInput_3) {
							row9 = new row9Struct();
						}

						// Construct the factory once when the first data
						// arrives.
						if (factory_tSalesforceInput_3 == null) {
							factory_tSalesforceInput_3 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>) new org.talend.daikon.avro.AvroRegistry()
									.createIndexedRecordConverter(data_tSalesforceInput_3
											.getClass());
						}

						// Enforce the outgoing schema on the input.
						outgoingEnforcer_tSalesforceInput_3
								.setWrapped(factory_tSalesforceInput_3
										.convertToAvro(data_tSalesforceInput_3));
						Object columnValue_0_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3
								.get(0);
						row9.Id = (String) (columnValue_0_tSalesforceInput_3);
					} catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_3) {
						java.util.Map<String, Object> info_tSalesforceInput_3 = e_tSalesforceInput_3
								.getRejectInfo();
						// TODO use a method instead of getting method by the
						// special key "error/errorMessage"
						Object errorMessage_tSalesforceInput_3 = null;
						if (info_tSalesforceInput_3.containsKey("error")) {
							errorMessage_tSalesforceInput_3 = info_tSalesforceInput_3
									.get("error");
						} else if (info_tSalesforceInput_3
								.containsKey("errorMessage")) {
							errorMessage_tSalesforceInput_3 = info_tSalesforceInput_3
									.get("errorMessage");
						} else {
							errorMessage_tSalesforceInput_3 = "Rejected but error message missing";
						}
						errorMessage_tSalesforceInput_3 = "Row "
								+ nb_line_tSalesforceInput_3 + ": "
								+ errorMessage_tSalesforceInput_3;
						System.err.println(errorMessage_tSalesforceInput_3);
						// If the record is reject, the main line record should
						// put NULL
						row9 = null;
					}
					java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_3 = new java.util.ArrayList<Object>();
					java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_3 = null;

					/**
					 * [tSalesforceInput_3 begin ] stop
					 */

					/**
					 * [tSalesforceInput_3 main ] start
					 */

					currentComponent = "tSalesforceInput_3";

					tos_count_tSalesforceInput_3++;

					/**
					 * [tSalesforceInput_3 main ] stop
					 */

					/**
					 * [tSalesforceInput_3 process_data_begin ] start
					 */

					currentComponent = "tSalesforceInput_3";

					/**
					 * [tSalesforceInput_3 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 main ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					// row9
					// row9

					if (execStat) {
						runStat.updateStatOnConnection("row9" + iterateId, 1, 1);
					}

					StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
					if (row9.Id != null) {
						sb_tFileOutputDelimited_3.append(row9.Id);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

					nb_line_tFileOutputDelimited_3++;
					resourceMap.put("nb_line_tFileOutputDelimited_3",
							nb_line_tFileOutputDelimited_3);

					outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3
							.toString());

					tos_count_tFileOutputDelimited_3++;

					/**
					 * [tFileOutputDelimited_3 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					/**
					 * [tFileOutputDelimited_3 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					/**
					 * [tFileOutputDelimited_3 process_data_end ] stop
					 */

					/**
					 * [tSalesforceInput_3 process_data_end ] start
					 */

					currentComponent = "tSalesforceInput_3";

					/**
					 * [tSalesforceInput_3 process_data_end ] stop
					 */

					/**
					 * [tSalesforceInput_3 end ] start
					 */

					currentComponent = "tSalesforceInput_3";

					// end of generic

					resourceMap.put("finish_tSalesforceInput_3", Boolean.TRUE);

				} // while
				reader_tSalesforceInput_3.close();
				final java.util.Map<String, Object> resultMap_tSalesforceInput_3 = reader_tSalesforceInput_3
						.getReturnValues();
				if (resultMap_tSalesforceInput_3 != null) {
					for (java.util.Map.Entry<String, Object> entry_tSalesforceInput_3 : resultMap_tSalesforceInput_3
							.entrySet()) {
						switch (entry_tSalesforceInput_3.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tSalesforceInput_3.setComponentData(
									"tSalesforceInput_3", "ERROR_MESSAGE",
									entry_tSalesforceInput_3.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tSalesforceInput_3.setComponentData(
									"tSalesforceInput_3", "NB_LINE",
									entry_tSalesforceInput_3.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tSalesforceInput_3.setComponentData(
									"tSalesforceInput_3", "NB_SUCCESS",
									entry_tSalesforceInput_3.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tSalesforceInput_3.setComponentData(
									"tSalesforceInput_3", "NB_REJECT",
									entry_tSalesforceInput_3.getValue());
							break;
						default:
							StringBuilder studio_key_tSalesforceInput_3 = new StringBuilder();
							for (int i_tSalesforceInput_3 = 0; i_tSalesforceInput_3 < entry_tSalesforceInput_3
									.getKey().length(); i_tSalesforceInput_3++) {
								char ch_tSalesforceInput_3 = entry_tSalesforceInput_3
										.getKey().charAt(i_tSalesforceInput_3);
								if (Character
										.isUpperCase(ch_tSalesforceInput_3)
										&& i_tSalesforceInput_3 > 0) {
									studio_key_tSalesforceInput_3.append('_');
								}
								studio_key_tSalesforceInput_3
										.append(ch_tSalesforceInput_3);
							}
							container_tSalesforceInput_3.setComponentData(
									"tSalesforceInput_3",
									studio_key_tSalesforceInput_3.toString()
											.toUpperCase(
													java.util.Locale.ENGLISH),
									entry_tSalesforceInput_3.getValue());
							break;
						}
					}
				}

				ok_Hash.put("tSalesforceInput_3", true);
				end_Hash.put("tSalesforceInput_3", System.currentTimeMillis());

				/**
				 * [tSalesforceInput_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tSalesforceInput_3:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceInput_3 finally ] start
				 */

				currentComponent = "tSalesforceInput_3";

				// finally of generic

				if (resourceMap.get("finish_tSalesforceInput_3") == null) {
					if (resourceMap.get("reader_tSalesforceInput_3") != null) {
						try {
							((org.talend.components.api.component.runtime.Reader) resourceMap
									.get("reader_tSalesforceInput_3")).close();
						} catch (java.io.IOException e_tSalesforceInput_3) {
							String errorMessage_tSalesforceInput_3 = "failed to release the resource in tSalesforceInput_3 :"
									+ e_tSalesforceInput_3.getMessage();
							System.err.println(errorMessage_tSalesforceInput_3);
						}
					}
				}

				/**
				 * [tSalesforceInput_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceInput_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				String foo = "bar";
				context.offset = context.offset + 200;
				System.out.println(context.offset);

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 process_data_begin ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_begin ] stop
				 */

				/**
				 * [tJava_3 process_data_end ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_end ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tLogRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				int tos_count_tLogRow_3 = 0;

				// /////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[1];

					public void addRow(String[] row) {

						for (int i = 0; i < 1; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 0 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);

						// last column
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() - fillChars[1].length()
								+ 2; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
				util_tLogRow_3.setTableName("tLogRow_3");
				util_tLogRow_3.addRow(new String[] { "Id", });
				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
				// /////////////////////

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tLogRow_3 main ] start
				 */

				currentComponent = "tLogRow_3";

				tos_count_tLogRow_3++;

				/**
				 * [tLogRow_3 main ] stop
				 */

				/**
				 * [tLogRow_3 process_data_begin ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_3 process_data_end ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 process_data_end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				// ////

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				consoleOut_tLogRow_3
						.println(util_tLogRow_3.format().toString());
				consoleOut_tLogRow_3.flush();
				// ////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

				// /////////////////////

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogRow_3_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tSalesforceConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tSalesforceConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSalesforceConnection_1 begin ] start
				 */

				ok_Hash.put("tSalesforceConnection_1", false);
				start_Hash.put("tSalesforceConnection_1",
						System.currentTimeMillis());

				currentComponent = "tSalesforceConnection_1";

				int tos_count_tSalesforceConnection_1 = 0;

				org.talend.components.api.component.ComponentDefinition def_tSalesforceConnection_1 = new org.talend.components.salesforce.tsalesforceconnection.TSalesforceConnectionDefinition();

				org.talend.components.salesforce.SalesforceConnectionProperties props_tSalesforceConnection_1 = (org.talend.components.salesforce.SalesforceConnectionProperties) def_tSalesforceConnection_1
						.createRuntimeProperties();
				props_tSalesforceConnection_1.setValue("endpoint",
						context.SOURCE_Endpt);

				props_tSalesforceConnection_1
						.setValue(
								"loginType",
								org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);

				props_tSalesforceConnection_1.setValue("bulkConnection", true);

				props_tSalesforceConnection_1
						.setValue("needCompression", false);

				props_tSalesforceConnection_1.setValue("timeout", 60000);

				props_tSalesforceConnection_1.setValue("httpTraceMessage",
						false);

				props_tSalesforceConnection_1.setValue("clientId", "");

				props_tSalesforceConnection_1.userPassword.setValue(
						"securityKey", context.SOURCE_SecuK);

				props_tSalesforceConnection_1.userPassword.setValue("useAuth",
						false);

				props_tSalesforceConnection_1.userPassword.setValue("userId",
						context.SOURCE_UserId);

				props_tSalesforceConnection_1.userPassword.setValue("password",
						context.SOURCE_PassW);

				props_tSalesforceConnection_1.proxy.setValue("useProxy", false);

				props_tSalesforceConnection_1.proxy.userPassword.setValue(
						"useAuth", false);

				props_tSalesforceConnection_1.referencedComponent.setValue(
						"referenceDefinitionName", "tSalesforceConnection");

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceConnection_1.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tSalesforceConnection_1 = props_tSalesforceConnection_1.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tSalesforceConnection_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceConnection_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tSalesforceConnection_1
										+ "_COMPONENT_RUNTIME_PROPERTIES");
						props_tSalesforceConnection_1.referencedComponent
								.setReference(referencedComponentProperties_tSalesforceConnection_1);
					}
				}
				globalMap.put(
						"tSalesforceConnection_1_COMPONENT_RUNTIME_PROPERTIES",
						props_tSalesforceConnection_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.1");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.25.3");
				java.net.URL mappings_url_tSalesforceConnection_1 = this
						.getClass().getResource("/xmlMappings");
				globalMap.put("tSalesforceConnection_1_MAPPINGS_URL",
						mappings_url_tSalesforceConnection_1);

				org.talend.components.api.container.RuntimeContainer container_tSalesforceConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId,
							String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId,
							String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tSalesforceConnection_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tSalesforceConnection_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tSalesforceConnection_1 = null;
				topology_tSalesforceConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceConnection_1 = def_tSalesforceConnection_1
						.getRuntimeInfo(
								org.talend.components.api.component.runtime.ExecutionEngine.DI,
								props_tSalesforceConnection_1,
								topology_tSalesforceConnection_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceConnection_1 = def_tSalesforceConnection_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tSalesforceConnection_1
								.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tSalesforceConnection_1 = componentRuntime_tSalesforceConnection_1
						.initialize(container_tSalesforceConnection_1,
								props_tSalesforceConnection_1);

				if (initVr_tSalesforceConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(
							initVr_tSalesforceConnection_1.getMessage());
				}

				if (componentRuntime_tSalesforceConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tSalesforceConnection_1;
					compDriverInitialization_tSalesforceConnection_1
							.runAtDriver(container_tSalesforceConnection_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceConnection_1 = null;
				if (componentRuntime_tSalesforceConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tSalesforceConnection_1;
					org.talend.daikon.properties.ValidationResult vr_tSalesforceConnection_1 = sourceOrSink_tSalesforceConnection_1
							.validate(container_tSalesforceConnection_1);
					if (vr_tSalesforceConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(
								vr_tSalesforceConnection_1.getMessage());
					}
				}

				/**
				 * [tSalesforceConnection_1 begin ] stop
				 */

				/**
				 * [tSalesforceConnection_1 main ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				tos_count_tSalesforceConnection_1++;

				/**
				 * [tSalesforceConnection_1 main ] stop
				 */

				/**
				 * [tSalesforceConnection_1 process_data_begin ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				/**
				 * [tSalesforceConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tSalesforceConnection_1 process_data_end ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				/**
				 * [tSalesforceConnection_1 process_data_end ] stop
				 */

				/**
				 * [tSalesforceConnection_1 end ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				// end of generic

				ok_Hash.put("tSalesforceConnection_1", true);
				end_Hash.put("tSalesforceConnection_1",
						System.currentTimeMillis());

				/**
				 * [tSalesforceConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tSalesforceConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tSalesforceConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceConnection_1 finally ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				// finally of generic

				/**
				 * [tSalesforceConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tSalesforceConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSalesforceConnection_2 begin ] start
				 */

				ok_Hash.put("tSalesforceConnection_2", false);
				start_Hash.put("tSalesforceConnection_2",
						System.currentTimeMillis());

				currentComponent = "tSalesforceConnection_2";

				int tos_count_tSalesforceConnection_2 = 0;

				org.talend.components.api.component.ComponentDefinition def_tSalesforceConnection_2 = new org.talend.components.salesforce.tsalesforceconnection.TSalesforceConnectionDefinition();

				org.talend.components.salesforce.SalesforceConnectionProperties props_tSalesforceConnection_2 = (org.talend.components.salesforce.SalesforceConnectionProperties) def_tSalesforceConnection_2
						.createRuntimeProperties();
				props_tSalesforceConnection_2.setValue("endpoint",
						context.CIBLE_Endpt);

				props_tSalesforceConnection_2
						.setValue(
								"loginType",
								org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);

				props_tSalesforceConnection_2.setValue("bulkConnection", true);

				props_tSalesforceConnection_2
						.setValue("needCompression", false);

				props_tSalesforceConnection_2.setValue("timeout", 60000);

				props_tSalesforceConnection_2.setValue("httpTraceMessage",
						false);

				props_tSalesforceConnection_2.setValue("clientId", "");

				props_tSalesforceConnection_2.userPassword.setValue(
						"securityKey", context.CIBLE_SecuK);

				props_tSalesforceConnection_2.userPassword.setValue("useAuth",
						false);

				props_tSalesforceConnection_2.userPassword.setValue("userId",
						context.CIBLE_UserId);

				props_tSalesforceConnection_2.userPassword.setValue("password",
						context.CIBLE_PassW);

				props_tSalesforceConnection_2.proxy.setValue("useProxy", false);

				props_tSalesforceConnection_2.proxy.userPassword.setValue(
						"useAuth", false);

				props_tSalesforceConnection_2.referencedComponent.setValue(
						"referenceDefinitionName", "tSalesforceConnection");

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceConnection_2.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tSalesforceConnection_2 = props_tSalesforceConnection_2.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tSalesforceConnection_2 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceConnection_2 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tSalesforceConnection_2
										+ "_COMPONENT_RUNTIME_PROPERTIES");
						props_tSalesforceConnection_2.referencedComponent
								.setReference(referencedComponentProperties_tSalesforceConnection_2);
					}
				}
				globalMap.put(
						"tSalesforceConnection_2_COMPONENT_RUNTIME_PROPERTIES",
						props_tSalesforceConnection_2);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.1");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.25.3");
				java.net.URL mappings_url_tSalesforceConnection_2 = this
						.getClass().getResource("/xmlMappings");
				globalMap.put("tSalesforceConnection_2_MAPPINGS_URL",
						mappings_url_tSalesforceConnection_2);

				org.talend.components.api.container.RuntimeContainer container_tSalesforceConnection_2 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId,
							String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId,
							String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tSalesforceConnection_2";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tSalesforceConnection_2 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tSalesforceConnection_2 = null;
				topology_tSalesforceConnection_2 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceConnection_2 = def_tSalesforceConnection_2
						.getRuntimeInfo(
								org.talend.components.api.component.runtime.ExecutionEngine.DI,
								props_tSalesforceConnection_2,
								topology_tSalesforceConnection_2);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceConnection_2 = def_tSalesforceConnection_2
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceConnection_2 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tSalesforceConnection_2
								.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tSalesforceConnection_2 = componentRuntime_tSalesforceConnection_2
						.initialize(container_tSalesforceConnection_2,
								props_tSalesforceConnection_2);

				if (initVr_tSalesforceConnection_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(
							initVr_tSalesforceConnection_2.getMessage());
				}

				if (componentRuntime_tSalesforceConnection_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceConnection_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tSalesforceConnection_2;
					compDriverInitialization_tSalesforceConnection_2
							.runAtDriver(container_tSalesforceConnection_2);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceConnection_2 = null;
				if (componentRuntime_tSalesforceConnection_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tSalesforceConnection_2 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tSalesforceConnection_2;
					org.talend.daikon.properties.ValidationResult vr_tSalesforceConnection_2 = sourceOrSink_tSalesforceConnection_2
							.validate(container_tSalesforceConnection_2);
					if (vr_tSalesforceConnection_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(
								vr_tSalesforceConnection_2.getMessage());
					}
				}

				/**
				 * [tSalesforceConnection_2 begin ] stop
				 */

				/**
				 * [tSalesforceConnection_2 main ] start
				 */

				currentComponent = "tSalesforceConnection_2";

				tos_count_tSalesforceConnection_2++;

				/**
				 * [tSalesforceConnection_2 main ] stop
				 */

				/**
				 * [tSalesforceConnection_2 process_data_begin ] start
				 */

				currentComponent = "tSalesforceConnection_2";

				/**
				 * [tSalesforceConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tSalesforceConnection_2 process_data_end ] start
				 */

				currentComponent = "tSalesforceConnection_2";

				/**
				 * [tSalesforceConnection_2 process_data_end ] stop
				 */

				/**
				 * [tSalesforceConnection_2 end ] start
				 */

				currentComponent = "tSalesforceConnection_2";

				// end of generic

				ok_Hash.put("tSalesforceConnection_2", true);
				end_Hash.put("tSalesforceConnection_2",
						System.currentTimeMillis());

				/**
				 * [tSalesforceConnection_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceConnection_2 finally ] start
				 */

				currentComponent = "tSalesforceConnection_2";

				// finally of generic

				/**
				 * [tSalesforceConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceConnection_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
		public java.sql.Connection getDBConnection(String dbDriver, String url,
				String userName, String password, String dbConnectionName)
				throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, userName,
					password, dbConnectionName);
		}

		public java.sql.Connection getDBConnection(String dbDriver, String url,
				String dbConnectionName) throws ClassNotFoundException,
				java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url,
					dbConnectionName);
		}
	};

	private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";

	{
		globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
	}

	public static void main(String[] args) {
		final test testClass = new test();

		int exitCode = testClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = test.class.getClassLoader()
					.getResourceAsStream(
							"technip/test_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = test.class.getClassLoader().getResourceAsStream(
						"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("ID", "id_String");

			context.ID = (String) context.getProperty("ID");
			context.setContextType("FULL_Endpt", "id_String");

			context.FULL_Endpt = (String) context.getProperty("FULL_Endpt");
			context.setContextType("FULL_PassW", "id_Password");

			String pwd_FULL_PassW_value = context.getProperty("FULL_PassW");
			context.FULL_PassW = null;
			if (pwd_FULL_PassW_value != null) {
				if (context_param.containsKey("FULL_PassW")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.FULL_PassW = pwd_FULL_PassW_value;
				} else if (!pwd_FULL_PassW_value.isEmpty()) {
					try {
						context.FULL_PassW = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_FULL_PassW_value);
						context.put("FULL_PassW", context.FULL_PassW);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("FULL_SecuK", "id_Password");

			String pwd_FULL_SecuK_value = context.getProperty("FULL_SecuK");
			context.FULL_SecuK = null;
			if (pwd_FULL_SecuK_value != null) {
				if (context_param.containsKey("FULL_SecuK")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.FULL_SecuK = pwd_FULL_SecuK_value;
				} else if (!pwd_FULL_SecuK_value.isEmpty()) {
					try {
						context.FULL_SecuK = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_FULL_SecuK_value);
						context.put("FULL_SecuK", context.FULL_SecuK);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("FULL_UserId", "id_String");

			context.FULL_UserId = (String) context.getProperty("FULL_UserId");
			context.setContextType("CIBLE_Endpt", "id_String");

			context.CIBLE_Endpt = (String) context.getProperty("CIBLE_Endpt");
			context.setContextType("CIBLE_PassW", "id_Password");

			String pwd_CIBLE_PassW_value = context.getProperty("CIBLE_PassW");
			context.CIBLE_PassW = null;
			if (pwd_CIBLE_PassW_value != null) {
				if (context_param.containsKey("CIBLE_PassW")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.CIBLE_PassW = pwd_CIBLE_PassW_value;
				} else if (!pwd_CIBLE_PassW_value.isEmpty()) {
					try {
						context.CIBLE_PassW = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_CIBLE_PassW_value);
						context.put("CIBLE_PassW", context.CIBLE_PassW);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("CIBLE_SecuK", "id_Password");

			String pwd_CIBLE_SecuK_value = context.getProperty("CIBLE_SecuK");
			context.CIBLE_SecuK = null;
			if (pwd_CIBLE_SecuK_value != null) {
				if (context_param.containsKey("CIBLE_SecuK")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.CIBLE_SecuK = pwd_CIBLE_SecuK_value;
				} else if (!pwd_CIBLE_SecuK_value.isEmpty()) {
					try {
						context.CIBLE_SecuK = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_CIBLE_SecuK_value);
						context.put("CIBLE_SecuK", context.CIBLE_SecuK);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("CIBLE_UserId", "id_String");

			context.CIBLE_UserId = (String) context.getProperty("CIBLE_UserId");
			context.setContextType("SOURCE_Endpt", "id_String");

			context.SOURCE_Endpt = (String) context.getProperty("SOURCE_Endpt");
			context.setContextType("SOURCE_PassW", "id_Password");

			String pwd_SOURCE_PassW_value = context.getProperty("SOURCE_PassW");
			context.SOURCE_PassW = null;
			if (pwd_SOURCE_PassW_value != null) {
				if (context_param.containsKey("SOURCE_PassW")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.SOURCE_PassW = pwd_SOURCE_PassW_value;
				} else if (!pwd_SOURCE_PassW_value.isEmpty()) {
					try {
						context.SOURCE_PassW = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_SOURCE_PassW_value);
						context.put("SOURCE_PassW", context.SOURCE_PassW);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("SOURCE_SecuK", "id_Password");

			String pwd_SOURCE_SecuK_value = context.getProperty("SOURCE_SecuK");
			context.SOURCE_SecuK = null;
			if (pwd_SOURCE_SecuK_value != null) {
				if (context_param.containsKey("SOURCE_SecuK")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.SOURCE_SecuK = pwd_SOURCE_SecuK_value;
				} else if (!pwd_SOURCE_SecuK_value.isEmpty()) {
					try {
						context.SOURCE_SecuK = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_SOURCE_SecuK_value);
						context.put("SOURCE_SecuK", context.SOURCE_SecuK);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("SOURCE_UserId", "id_String");

			context.SOURCE_UserId = (String) context
					.getProperty("SOURCE_UserId");
			context.setContextType("offset", "id_Integer");

			try {
				context.offset = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("offset"));
			} catch (NumberFormatException e) {
				System.err.println(String.format(
						"Null value will be used for context parameter %s: %s",
						"offset", e.getMessage()));
				context.offset = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ID")) {
				context.ID = (String) parentContextMap.get("ID");
			}
			if (parentContextMap.containsKey("FULL_Endpt")) {
				context.FULL_Endpt = (String) parentContextMap
						.get("FULL_Endpt");
			}
			if (parentContextMap.containsKey("FULL_PassW")) {
				context.FULL_PassW = (java.lang.String) parentContextMap
						.get("FULL_PassW");
			}
			if (parentContextMap.containsKey("FULL_SecuK")) {
				context.FULL_SecuK = (java.lang.String) parentContextMap
						.get("FULL_SecuK");
			}
			if (parentContextMap.containsKey("FULL_UserId")) {
				context.FULL_UserId = (String) parentContextMap
						.get("FULL_UserId");
			}
			if (parentContextMap.containsKey("CIBLE_Endpt")) {
				context.CIBLE_Endpt = (String) parentContextMap
						.get("CIBLE_Endpt");
			}
			if (parentContextMap.containsKey("CIBLE_PassW")) {
				context.CIBLE_PassW = (java.lang.String) parentContextMap
						.get("CIBLE_PassW");
			}
			if (parentContextMap.containsKey("CIBLE_SecuK")) {
				context.CIBLE_SecuK = (java.lang.String) parentContextMap
						.get("CIBLE_SecuK");
			}
			if (parentContextMap.containsKey("CIBLE_UserId")) {
				context.CIBLE_UserId = (String) parentContextMap
						.get("CIBLE_UserId");
			}
			if (parentContextMap.containsKey("SOURCE_Endpt")) {
				context.SOURCE_Endpt = (String) parentContextMap
						.get("SOURCE_Endpt");
			}
			if (parentContextMap.containsKey("SOURCE_PassW")) {
				context.SOURCE_PassW = (java.lang.String) parentContextMap
						.get("SOURCE_PassW");
			}
			if (parentContextMap.containsKey("SOURCE_SecuK")) {
				context.SOURCE_SecuK = (java.lang.String) parentContextMap
						.get("SOURCE_SecuK");
			}
			if (parentContextMap.containsKey("SOURCE_UserId")) {
				context.SOURCE_UserId = (String) parentContextMap
						.get("SOURCE_UserId");
			}
			if (parentContextMap.containsKey("offset")) {
				context.offset = (Integer) parentContextMap.get("offset");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("FULL_PassW");
		parametersToEncrypt.add("FULL_SecuK");
		parametersToEncrypt.add("CIBLE_PassW");
		parametersToEncrypt.add("CIBLE_SecuK");
		parametersToEncrypt.add("SOURCE_PassW");
		parametersToEncrypt.add("SOURCE_SecuK");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		try {
			errorCode = null;
			Implicit_Context_RegexProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_Implicit_Context_Regex) {
			globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", -1);

			e_Implicit_Context_Regex.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_4) {
			globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_4.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : test");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		connections.put("conn_tSalesforceConnection_1",
				globalMap.get("conn_tSalesforceConnection_1"));
		connections.put("conn_tSalesforceConnection_2",
				globalMap.get("conn_tSalesforceConnection_2"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 150076 characters generated by Talend Open Studio for Data Integration on the
 * 3 janvier 2020 10:04:33 CET
 ************************************************************************************************/
